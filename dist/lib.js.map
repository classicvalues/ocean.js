{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/Constants.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  console.log(\n    'contract config ',\n    config.transactionBlockTimeout,\n    config.transactionConfirmationBlocks,\n    config.transactionPollingTimeout\n  )\n  console.log(\n    'contract value ',\n    contract.transactionBlockTimeout,\n    contract.transactionConfirmationBlocks,\n    contract.transactionPollingTimeout\n  )\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  console.log('getFairGasPrice ', config?.gasFeeMultiplier)\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer)\n    freParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport { amountToUnits, getFairGasPrice, unitsToAmount } from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeToken: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\nconst addressZERO = '0x0000000000000000000000000000000000000000'\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          addressZERO,\n          addressZERO,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        addressZERO,\n        addressZERO,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","ZERO_ADDRESS","signWithHash","text","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signText","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","proof","validatorAddress","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","GASLIMIT_DEFAULT","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","addressZERO","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getOwner","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","templateAddress","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}