{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/Constants.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  console.log(\n    `contract config ${config?.transactionBlockTimeout} , ${config?.transactionConfirmationBlocks} , ${config?.transactionPollingTimeout}`\n  )\n  console.log(\n    `contract value ${contract?.transactionBlockTimeout} , ${contract?.transactionConfirmationBlocks} , ${contract?.transactionPollingTimeout}`\n  )\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  console.log(`getFairGasPrice ${config?.gasFeeMultiplier}`)\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer)\n    freParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport { amountToUnits, getFairGasPrice, unitsToAmount } from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    console.log('contract FRE config ')\n    console.log(this.config)\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    console.log(\n      `contract calcBaseInGivenOutDT config ${this.contract?.transactionBlockTimeout} , ${this.contract?.transactionConfirmationBlocks} , ${this.contract?.transactionPollingTimeout}`\n    )\n    LoggerInstance.log(\n      `contract calcBaseInGivenOutDT config log : ${this.contract?.transactionBlockTimeout} , ${this.contract?.transactionConfirmationBlocks} , ${this.contract?.transactionPollingTimeout}`\n    )\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeToken: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\nconst addressZERO = '0x0000000000000000000000000000000000000000'\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          addressZERO,\n          addressZERO,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        addressZERO,\n        addressZERO,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","ZERO_ADDRESS","signWithHash","text","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signText","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","proof","validatorAddress","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","GASLIMIT_DEFAULT","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","then","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this42$contract","_this42$contract2","_this42$contract3","_this42$contract4","_this42$contract5","_this42$contract6","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","addressZERO","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getOwner","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","templateAddress","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}