{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","GASLIMIT_DEFAULT","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","parseInt","getDatatokenCirculatingSupply","ssAddress","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}