{"version":3,"file":"lib.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","signWithHash","text","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signText","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","proof","validatorAddress","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","GASLIMIT_DEFAULT","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","parseInt","getDatatokenCirculatingSupply","ssAddress","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}