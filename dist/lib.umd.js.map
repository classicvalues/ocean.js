{"version":3,"file":"lib.umd.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","signWithHash","text","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signText","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","proof","validatorAddress","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","parseInt","getDatatokenCirculatingSupply","ssAddress","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}