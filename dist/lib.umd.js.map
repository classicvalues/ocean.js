{"version":3,"file":"lib.umd.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000',\n    providerUri: 'http://172.15.0.4:8030'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager = (await this.getDTPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport fetch from 'cross-fetch'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute start failed: ', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","hash","proof","validatorAddress","publicKey","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","parseInt","getDatatokenCirculatingSupply","ssAddress","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","sign","encrypt","text","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}