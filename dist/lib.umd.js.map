{"version":3,"file":"lib.umd.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/Constants.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts","../src/models/Config.ts","../src/utils/DdoHelpers.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer)\n    freParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport { amountToUnits, getFairGasPrice, unitsToAmount } from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeToken: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeAmount: '0'\n      }\n    }\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\nconst addressZERO = '0x0000000000000000000000000000000000000000'\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          addressZERO,\n          addressZERO,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        addressZERO,\n        addressZERO,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","getData","url","fetch","method","headers","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","GASLIMIT_DEFAULT","signWithHash","text","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signText","balance","allowance","tokenAddress","account","spender","trxReceipt","estApprove","contractInstance","estGas","gasLimitDefault","approve","estimateGas","from","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","Decimal","bind","pact","_settle","result","Aquarius","aquariusURL","did","signal","path","response","ok","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","body","JSON","stringify","proof","validatorAddress","r","s","v","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","PoolTemplate","abi","sharesBalance","_this2","balanceOf","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","send","gas","gasPrice","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","address","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","greaterThanOrEqualTo","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","data","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","_dtContract$methods$s4","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","addressZERO","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getOwner","getCurrentTokenTemplateCount","getCurrentTemplateCount","index","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","templateAddress","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","noZeroX","input","zeroOutput","regexp","conversorName","match","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","payload","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddress","ProviderInstance","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","force","_tokenContract$method3","currentAllowence","filename","get","split","pop","arrayBuffer","anchor","document","createElement","download","href","click","opts","_error2","erc721Address","toChecksumAddress","sha256","postWithHeaders","signedMessage","substr","slice"],"mappings":"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"}