{"version":3,"file":"lib.module.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/Constants.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  console.log(\n    `contract config ${config?.transactionBlockTimeout} , ${config?.transactionConfirmationBlocks} , ${config?.transactionPollingTimeout}`\n  )\n  console.log(\n    `contract value ${contract?.transactionBlockTimeout} , ${contract?.transactionConfirmationBlocks} , ${contract?.transactionPollingTimeout}`\n  )\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  console.log(`getFairGasPrice ${config?.gasFeeMultiplier}`)\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer)\n    freParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport { amountToUnits, getFairGasPrice, unitsToAmount } from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false\n): Promise<TransactionReceipt | string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, null)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    console.log('contract FRE config ')\n    console.log(this.config)\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = '0x0000000000000000000000000000000000000000',\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    console.log(\n      `contract calcBaseInGivenOutDT config ${this.contract?.transactionBlockTimeout} , ${this.contract?.transactionConfirmationBlocks} , ${this.contract?.transactionPollingTimeout}`\n    )\n    LoggerInstance.log(\n      `contract calcBaseInGivenOutDT config log : ${this.contract?.transactionBlockTimeout} , ${this.contract?.transactionConfirmationBlocks} , ${this.contract?.transactionPollingTimeout}`\n    )\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer)\n      fixedRateParams.allowedConsumer = '0x0000000000000000000000000000000000000000'\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper)\n      dispenserParams.allowedSwapper = '0x0000000000000000000000000000000000000000'\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeToken: '0x0000000000000000000000000000000000000000',\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n      from: address\n    })\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\nconst addressZERO = '0x0000000000000000000000000000000000000000'\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          addressZERO,\n          addressZERO,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        addressZERO,\n        addressZERO,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === addressZERO) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","url","payload","postWithHeaders","headers","fetch","method","body","getData","downloadFile","index","response","ok","filename","get","match","split","pop","arrayBuffer","data","downloadFileBrowser","anchor","document","createElement","download","href","click","fetchData","opts","result","text","_error2","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","ZERO_ADDRESS","GASLIMIT_DEFAULT","signWithHash","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signHash","address","signedMessage","r","substr","slice","s","v","signText","balance","tokenAddress","account","balanceOf","trxReceipt","allowance","spender","approve","force","estApprove","estGas","_tokenContract$method3","send","from","gas","gasPrice","currentAllowence","Decimal","greaterThanOrEqualTo","contractInstance","gasLimitDefault","estimateGas","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","bind","pact","_settle","Aquarius","aquariusURL","did","signal","path","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","JSON","stringify","proof","validatorAddress","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","PoolTemplate","abi","sharesBalance","_this2","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","String","isMinter","then","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this42$contract","_this42$contract2","_this42$contract3","_this42$contract4","_this42$contract5","_this42$contract6","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","addressZERO","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getOwner","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","templateAddress","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance"],"mappings":"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"}