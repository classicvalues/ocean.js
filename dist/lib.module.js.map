{"version":3,"file":"lib.module.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","logLevel","Error","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","amountToUnits","web3","token","amount","tokenContract","eth","Contract","methods","decimals","call","BigNumber","config","EXPONENTIAL_AT","times","exponentiatedBy","toString","e","message","unitsToAmount","amountFormatted","div","getPoolCreationParams","poolParams","ssContract","baseTokenAddress","baseTokenSender","publisherAddress","marketFeeCollector","poolTemplateAddress","vestedBlocks","Web3","utils","toWei","vestingAmount","baseTokenDecimals","rate","initialBaseTokenLiquidity","addresses","ssParams","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","getFairGasPrice","getGasPrice","x","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","setContractDefaults","contract","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getErcCreationParams","ercParams","templateIndex","strings","minter","paymentCollector","mpFeeAddress","feeToken","uints","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","owner","datatokenDecimals","fixedRate","marketFee","postData","url","payload","postWithHeaders","headers","fetch","method","body","getData","downloadFile","index","response","ok","filename","get","match","split","pop","arrayBuffer","data","downloadFileBrowser","anchor","document","createElement","download","href","click","fetchData","opts","result","text","_error2","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","erc721FactoryAddress","ERC721Factory","sideStakingAddress","Staking","opfCommunityFeeCollector","OPFCommunityFeeCollector","poolTemplate","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signWithHash","publicKey","password","hash","utf8ToHex","isMetaMask","currentProvider","personal","sign","e2","signHash","address","signedMessage","r","substr","slice","s","v","signText","balance","tokenAddress","account","balanceOf","trxReceipt","allowance","spender","approve","force","estApprove","estGas","_tokenContract$method3","send","from","gas","gasPrice","currentAllowence","Decimal","greaterThanOrEqualTo","contractInstance","gasLimitDefault","estimateGas","err","sleep","ms","Promise","resolve","setTimeout","getMaxRemoveLiquidity","poolInstance","poolAddress","getReserve","calcMaxExactIn","getMaxAddLiquidity","getMaxSwapExactIn","getMaxSwapExactOut","calcMaxExactOut","bind","pact","_settle","Aquarius","aquariusURL","did","signal","path","json","status","waitForAqua","txid","tries","_this4","ddo","event","validate","jsonResponse","valid","_this6","JSON","stringify","proof","validatorAddress","errors","MaxUint256","prototype","state","update","_isSettledPact","_resumeAfterBody","reject","_resumeAfterTest","Pool","poolAbi","PoolTemplate","abi","sharesBalance","_this2","fromWei","estSetSwapFee","fee","poolContract","defaultErc20Abi","setSwapFee","pool","_pool$methods$setSwap2","getNumTokens","_this8","getPoolSharesTotalSupply","_this10","totalSupply","getCurrentTokens","_this12","getFinalTokens","_this14","getController","_this16","getBaseToken","_this18","getBaseTokenAddress","getDatatoken","_this20","getDatatokenAddress","getMarketFee","_this22","getMarketFeeCollector","_this24","_publishMarketCollector","getOPCCollector","_this26","_opcCollector","isBound","_this28","_this30","getBalance","isFinalized","_this32","getSwapFee","_this34","getNormalizedWeight","_this36","weight","getDenormalizedWeight","_this38","getTotalDenormalizedWeight","_this40","getMarketFees","_this42","publishMarketFees","getCurrentMarketFees","_this44","getCurrentOPCFees","_this46","getCommunityFees","_this48","communityFees","estCollectOPC","_this50","collectOPC","_this52","_pool$methods$collect2","estCollectMarketFee","_this54","collectMarketFee","_this56","_this55$getMarketFeeC","_pool$methods$collect4","estUpdatePublishMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","_this58","updatePublishMarketFee","_this60","_this59$getMarketFeeC","_pool$methods$updateP2","estSwapExactAmountIn","tokenInOutMarket","amountsInOutMaxFee","_this62","tokenIn","tokenAmountIn","tokenOut","minAmountOut","maxPrice","_amountsInOutMaxFee$m","swapExactAmountIn","_this64","maxSwap","greaterThan","_pool$methods$swapExa2","estSwapExactAmountOut","_this66","maxAmountIn","tokenAmountOut","swapExactAmountOut","_this68","_amountsInOutMaxFee$m4","_pool$methods$swapExa4","estJoinPool","poolAmountOut","maxAmountsIn","_this70","joinPool","_this72","weiMaxAmountsIn","tokens","_pool$methods$joinPoo2","i","push","estExitPool","poolAmountIn","minAmountsOut","_this74","exitPool","_this76","weiMinAmountsOut","_pool$methods$exitPoo2","estJoinswapExternAmountIn","minPoolAmountOut","_this78","joinswapExternAmountIn","_this80","amountInFormatted","_pool$methods$joinswa2","estExitswapPoolAmountIn","minTokenAmountOut","_this82","exitswapPoolAmountIn","_this84","calcSingleOutGivenPoolIn","minTokenOutFormatted","_pool$methods$exitswa2","getSpotPrice","decimalsDiff","decimalsTokenIn","decimalsTokenOut","price","_this86","tokenOutContract","tokenInContract","getAmountInExactOut","_this88","amountOutFormatted","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","tokenAmount","liquidityProviderSwapFeeAmount","getAmountOutExactIn","_this90","calcPoolOutGivenSingleIn","_this92","_pool$methods","calcPoolOutSingleIn","_calcPoolOutSingleIn","calcSingleInGivenPoolOut","_this94","calcSingleInPoolOut","_this96","_pool$methods2","calcSingleOutPoolIn","_calcSingleOutPoolIn","calcPoolInGivenSingleOut","_this98","_pool$methods3","calcPoolInSingleOut","_calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","FixedRateCreateProgressStep","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","_exit2","logger","estGasCreate","dtAddress","allowedSwapper","create","_this5$dispenserContr","estGasActivate","activate","_this9$dispenserContr","estGasDeactivate","deactivate","_this13$dispenserCont","estGasSetAllowedSwapper","newAllowedSwapper","setAllowedSwapper","_this17$dispenserCont","estGasDispense","destination","dispense","_this21$dispenserCont","estGasOwnerWithdraw","ownerWithdraw","_this25$dispenserCont","isDispensable","datatoken","active","String","isMinter","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","generateExchangeId","baseToken","estBuyDT","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","getExchange","exchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","_this9$contract$metho","estSellDT","sellDT","minBaseTokenAmount","minBtFormatted","_this13$contract$meth","getNumberOfExchanges","estSetRate","newRate","_fixedRate$methods","setRate","_setRate","_this19$contract$meth","estSetAllowedSwapper","_this23$contract$meth","estActivate","toggleExchangeState","_this27$contract$meth","estDeactivate","_this31$contract$meth","getRate","weiRate","getDTSupply","dtSupply","_this35$getExchange","getBTSupply","btSupply","_this37$getExchange","getAllowedSwapper","calcBaseInGivenOutDT","fixedRateExchange","_this41$contract$meth","_calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","getAmountBTOut","_this43$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this43$getExchange","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","_this47$getExchange2","marketFeeAvailable","_this47$getExchange","oceanFeeAvailable","getExchanges","isActive","estActivateMint","toggleMintState","activateMint","_this55$contract$meth","estDeactivateMint","deactivateMint","_this59$contract$meth","estCollectBT","fixedrate","amountWei","collectBT","_this63$contract$meth","estCollectDT","collectDT","_this67$contract$meth","_this71$contract$meth","estCollectOceanFee","collectOceanFee","_this75$contract$meth","opcCollector","getRouter","router","getExchangeOwner","_this81$getExchange","exchangeOwner","estUpdateMarketFee","newMarketFee","updateMarketFee","_this85$contract$meth","estUpdateMarketFeeCollector","newMarketFeeCollector","updateMarketFeeCollector","_this89$contract$meth","SideStaking","SideStakingTemplate","parseInt","getDatatokenCirculatingSupply","ssAddress","sideStaking","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","estGetVesting","getVesting","_sideStaking$methods$14","estSetPoolSwapFee","swapFee","setPoolSwapFee","_sideStaking$methods$17","Router","routerAddress","RouterAbi","defaultRouter","estGasBuyDTBatch","operations","buyDTBatch","_this3$router$methods","isApprovedToken","isSideStaking","isSSContract","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","isPoolTemplate","estGasAddApprovedToken","routerContract","addApprovedToken","_this19$getOwner","_this19$router$method","estGasRemoveApprovedToken","removeApprovedToken","_this23$getOwner","_this23$router$method","estGasAddSSContract","addSSContract","_this27$getOwner","_this27$router$method","estGasRemoveSSContract","removeSSContract","_this31$getOwner","_this31$router$method","estGasAddFixedRateContract","addFixedRateContract","_this35$getOwner","_this35$router$method","estGasRemoveFixedRateContract","removeFixedRateContract","_this39$getOwner","_this39$router$method","estGasAddDispenserContract","addDispenserContract","_this43$getOwner","_this43$router$method","estGasRemoveDispenserContract","removeDispenserContract","_this47$getOwner","_this47$router$method","getOPCFee","getCurrentOPCFee","swapOceanFee","estGasUpdateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","_this55$getOwner","_this55$router$method","estGasAddPoolTemplate","templateAddress","addPoolTemplate","_this59$getOwner","_this59$router$method","estGasRemovePoolTemplate","removePoolTemplate","_this63$getOwner","_this63$router$method","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","estGasCreateErc20","nftAddress","nftContract","createERC20","createErc20","getNftPermissions","_this3$getNftPermissi","deployERC20","_nftContract$methods$2","events","TokenCreated","returnValues","estGasAddManager","manager","addManager","getNftOwner","_this7$getNftOwner","_nftContract$methods$4","estGasRemoveManager","removeManager","_this11$getNftOwner","_nftContract$methods$6","estGasAddErc20Deployer","erc20Deployer","addToCreateERC20List","addErc20Deployer","_this15$getNftPermiss","_nftContract$methods$8","estGasRemoveErc20Deployer","removeFromCreateErc20List","removeErc20Deployer","_temp11","_this19$getNftPermiss2","removeFromCreateERC20List","_nftContract$methods$10","_this19$getNftPermiss","estGasAddMetadataUpdater","metadataUpdater","addToMetadataList","addMetadataUpdater","_this23$getNftPermiss","_nftContract$methods$12","esGasRemoveMetadataUpdater","removeFromMetadataList","removeMetadataUpdater","_temp17","_this27$getNftPermiss2","updateMetadata","_nftContract$methods$14","_this27$getNftPermiss","estGasAddStoreUpdater","storeUpdater","addTo725StoreList","addStoreUpdater","_this31$getNftPermiss","_nftContract$methods$16","estGasRemoveStoreUpdater","removeFrom725StoreList","removeStoreUpdater","_temp23","_this35$getNftPermiss2","store","_nftContract$methods$18","_this35$getNftPermiss","estGasCleanPermissions","cleanPermissions","_this39$getNftOwner","_nftContract$methods$20","estGasTransferNft","nftOwner","nftReceiver","tokenId","transferFrom","transferNft","_this43$getNftOwner","tokenIdentifier","_nftContract$methods$22","estGasSafeTransferNft","safeTransferFrom","safeTransferNft","_this47$getNftOwner","_nftContract$methods$24","estGasSetMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","setMetadata","_this51$getNftPermiss","_nftContract$methods$26","estGasSetMetadataAndTokenURI","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataAndTokenURI","_this55$getNftPermiss","_nftContract$methods$28","estGasSetMetadataState","setMetaDataState","setMetadataState","_this59$getNftPermiss","_nftContract$methods$30","estSetTokenURI","setTokenURI","_nftContract$methods$32","ownerOf","getPermissions","getMetadata","getMetaData","isErc20Deployer","isERC20Deployer","key","getTokenURI","id","tokenURI","recover","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","estGasApprove","dtContract","_dtContract$methods$a2","estGasMint","toAddress","mint","estGasCreateFixedRate","fixedRateParams","createFixedRate","_dtContract$methods$c2","estGasCreateDispenser","dispenserParams","createDispenser","_dtContract$methods$c4","getDTPermissions","_this15$getDTPermissi","getCap","capAvailble","gte","_dtContract$methods$m2","estGasAddMinter","addMinter","_this19$isERC20Deploy","_dtContract$methods$a4","estGasRemoveMinter","removeMinter","_this23$isERC20Deploy","_dtContract$methods$r2","estGasAddPaymentManager","paymentManager","addPaymentManager","_this27$isERC20Deploy","_dtContract$methods$a6","estGasRemovePaymentManager","removePaymentManager","_this31$isERC20Deploy","_dtContract$methods$r4","estGasSetPaymentCollector","setPaymentCollector","nftPermissions","isPaymentManager","isNftOwner","_dtContract$methods$s2","_this35$nft$getNftOwn","_this35$getDTPermissi","getNFTAddress","getPaymentCollector","transfer","weiAmount","transferWei","estGasTransfer","_dtContract$methods$t2","estGasStartOrder","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","getPublishingMarketFee","publishMarketFee","_dtContract$methods$s4","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","all","estGasBuyFromFreAndOrder","orderParams","buyFromFreAndOrder","freContractParams","_dtContract$methods$b2","estGasBuyFromDispenserAndOrder","buyFromDispenserAndOrder","_dtContract$methods$b4","estGasSetData","value","setData","_dtContract$methods$s6","_this63$nft2","_this63$nft$getNftOwn","_dtContract$methods$c6","permissions","getDecimals","getERC721Address","NftFactory","factory721","defaultFactory721Abi","estGasCreateNFT","nftData","deployERC721Contract","transferable","createNFT","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this3$getNFTTemplate","_this3$factory721$met","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","estGasAddNFTTemplate","add721TokenTemplate","addNFTTemplate","_this25$getOwner","_this25$factory721$me","estGasDisableNFTTemplate","disable721TokenTemplate","disableNFTTemplate","_this29$getOwner","_this29$factory721$me","estGasReactivateNFTTemplate","reactivate721TokenTemplate","reactivateNFTTemplate","_this33$getOwner","_this33$factory721$me","estGasAddTokenTemplate","addTokenTemplate","_this37$getOwner","_this37$factory721$me","estGasDisableTokenTemplate","disableTokenTemplate","_this41$getOwner","_this41$getTokenTempl","_this41$factory721$me","estGasReactivateTokenTemplate","reactivateTokenTemplate","_this45$getOwner","_this45$getTokenTempl","_this45$factory721$me","estGasStartMultipleTokenOrder","orders","startMultipleTokenOrder","_this49$factory721$me","estGasCreateNftWithErc20","nftCreateData","ercCreateData","createNftWithErc20","_this53$factory721$me","estGasCreateNftErc20WithPool","poolData","createNftWithErc20WithPool","createNftErc20WithPool","_this57$factory721$me","estGasCreateNftErc20WithFixedRate","fixedData","createNftWithErc20WithFixedRate","createNftErc20WithFixedRate","_this61$factory721$me","estGasCreateNftErc20WithDispenser","createNftWithErc20WithDispenser","createNftErc20WithDispenser","_this65$factory721$me","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","regexp","conversorName","output","inputMatch","zeroXTransformer","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","createSignature","accountId","agreementId","createHashSignature","encrypt","checkDidFiles","serviceId","args","files","results","checkFileUrl","getComputeEnvironments","_this10$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","Object","environment","statusText","params","computeStop","jobId","computeStopUrl","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","ProviderInstance"],"mappings":"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"}