{"version":3,"file":"lib.modern.js","sources":["../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/minAbi.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/FetchHelper.ts","../src/utils/ConfigHelper.ts","../src/utils/DdoHelpers.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/General.ts","../src/utils/PoolHelpers.ts","../src/aquarius/Aquarius.ts","../src/pools/balancer/Pool.ts","../src/pools/dispenser/Dispenser.ts","../src/pools/fixedRate/FixedRateExchange.ts","../src/pools/ssContracts/SideStaking.ts","../src/pools/Router.ts","../src/tokens/NFT.ts","../src/tokens/Datatoken.ts","../src/factories/NFTFactory.ts","../src/models/Config.ts","../src/utils/ConversionTypeHelper.ts","../src/provider/Provider.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\nexport default LoggerInstance\n","import wordListDefault from '../data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { generateDtName } from './DatatokenName'\nimport {\n  Erc20CreateParams,\n  FreCreationParams,\n  FreOrderParams,\n  PoolCreationParams\n} from '../@types'\nimport { Config } from '../models'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { ZERO_ADDRESS } from './Constants'\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(web3: Web3, config: Config): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (config && config.gasFeeMultiplier)\n    return x\n      .multipliedBy(config.gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport function getErcCreationParams(ercParams: Erc20CreateParams): any {\n  let name: string, symbol: string\n  // Generate name & symbol if not present\n  if (!ercParams.name || !ercParams.symbol) {\n    ;({ name, symbol } = generateDtName())\n  }\n  return {\n    templateIndex: ercParams.templateIndex,\n    strings: [ercParams.name || name, ercParams.symbol || symbol],\n    addresses: [\n      ercParams.minter,\n      ercParams.paymentCollector,\n      ercParams.mpFeeAddress,\n      ercParams.feeToken\n    ],\n    uints: [Web3.utils.toWei(ercParams.cap), Web3.utils.toWei(ercParams.feeAmount)],\n    bytess: []\n  }\n}\n\nexport function getFreOrderParams(freParams: FreOrderParams): any {\n  return {\n    exchangeContract: freParams.exchangeContract,\n    exchangeId: freParams.exchangeId,\n    maxBaseTokenAmount: Web3.utils.toWei(freParams.maxBaseTokenAmount),\n    swapMarketFee: Web3.utils.toWei(freParams.swapMarketFee),\n    marketFeeAddress: freParams.marketFeeAddress\n  }\n}\n\nexport function getFreCreationParams(freParams: FreCreationParams): any {\n  if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n  const withMint = freParams.withMint ? 1 : 0\n\n  return {\n    fixedPriceAddress: freParams.fixedRateAddress,\n    addresses: [\n      freParams.baseTokenAddress,\n      freParams.owner,\n      freParams.marketFeeCollector,\n      freParams.allowedConsumer\n    ],\n    uints: [\n      freParams.baseTokenDecimals,\n      freParams.datatokenDecimals,\n      Web3.utils.toWei(freParams.fixedRate),\n      Web3.utils.toWei(freParams.marketFee),\n      withMint\n    ]\n  }\n}\n\nexport async function getPoolCreationParams(\n  web3: Web3,\n  poolParams: PoolCreationParams\n): Promise<any> {\n  return {\n    addresses: [\n      poolParams.ssContract,\n      poolParams.baseTokenAddress,\n      poolParams.baseTokenSender,\n      poolParams.publisherAddress,\n      poolParams.marketFeeCollector,\n      poolParams.poolTemplateAddress\n    ],\n    ssParams: [\n      Web3.utils.toWei(poolParams.rate),\n      poolParams.baseTokenDecimals,\n      Web3.utils.toWei(poolParams.vestingAmount),\n      poolParams.vestedBlocks,\n      await amountToUnits(\n        web3,\n        poolParams.baseTokenAddress,\n        poolParams.initialBaseTokenLiquidity\n      )\n    ],\n    swapFees: [\n      Web3.utils.toWei(poolParams.swapFeeLiquidityProvider),\n      Web3.utils.toWei(poolParams.swapFeeMarketRunner)\n    ]\n  }\n}\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n\n    const amountFormatted = new BigNumber(amount).div(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18' : ${e.message}`)\n  }\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string\n): Promise<string> {\n  try {\n    const tokenContract = new web3.eth.Contract(minAbi, token)\n    let decimals = await tokenContract.methods.decimals().call()\n    if (decimals === '0') {\n      decimals = 18\n    }\n    BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n    const amountFormatted = new BigNumber(amount).times(\n      new BigNumber(10).exponentiatedBy(decimals)\n    )\n\n    return amountFormatted.toString()\n  } catch (e) {\n    LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18', ${e.message}`)\n  }\n}\n","import fetch from 'cross-fetch'\nimport LoggerInstance from './Logger'\nimport { DownloadResponse } from '../@types/DownloadResponse'\n\nexport async function fetchData(url: string, opts: RequestInit): Promise<Response> {\n  const result = await fetch(url, opts)\n  if (!result.ok) {\n    LoggerInstance.error(`Error requesting [${opts.method}] ${url}`)\n    LoggerInstance.error(`Response message: \\n${await result.text()}`)\n    throw result\n  }\n  return result\n}\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const anchor = document.createElement('a')\n  anchor.download = ''\n  anchor.href = url\n  anchor.click()\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n\nexport async function getData(url: string): Promise<Response> {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  })\n}\n\nasync function postWithHeaders(\n  url: string,\n  payload: BodyInit,\n  headers: any\n): Promise<Response> {\n  if (payload != null) {\n    return fetch(url, {\n      method: 'POST',\n      body: payload,\n      headers\n    })\n  } else {\n    return fetch(url, {\n      method: 'POST'\n    })\n  }\n}\n\nexport async function postData(url: string, payload: BodyInit): Promise<Response> {\n  const headers = {\n    'Content-type': 'application/json'\n  }\n  return postWithHeaders(url, payload, headers)\n}\n","import Config from '../models/Config'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport LoggerInstance from './Logger'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'http://127.0.0.1:8030',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  poolTemplateAddress: null,\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://127.0.0.1:5000'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 3,\n    network: 'ropsten',\n    nodeUri: 'https://ropsten.infura.io/v3',\n    providerUri: 'https://v4.provider.ropsten.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.ropsten.oceanprotocol.com',\n    explorerUri: 'https://ropsten.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 4,\n    network: 'rinkeby',\n    nodeUri: 'https://rinkeby.infura.io/v3',\n    providerUri: 'https://v4.provider.rinkeby.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.rinkeby.oceanprotocol.com',\n    explorerUri: 'https://rinkeby.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.mainnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    providerUri: 'https://v4.provider.polygon.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1287,\n    network: 'moonbase',\n    nodeUri: 'https://rpc.api.moonbase.moonbeam.network',\n    providerUri: 'https://v4.provider.moonbase.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonbase.oceanprotocol.com',\n    explorerUri: 'https://moonbase.moonscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    providerUri: 'https://v4.provider.mumbai.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    providerUri: 'https://v4.provider.bsc.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    providerUri: 'https://v4.provider.energyweb.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    providerUri: 'https://v4.provider.moonriver.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      try {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          ERC721Factory,\n          OPFCommunityFeeCollector,\n          Ocean,\n          chainId,\n          startBlock\n        } = customAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      } catch (e) {\n        // console.error(`ERROR: Could not load local contract address file: ${e.message}`)\n        // return null\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          Staking,\n          poolTemplate,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          erc721FactoryAddress: ERC721Factory,\n          sideStakingAddress: Staking,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          poolTemplateAddress: poolTemplate,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId: chainId,\n          startBlock: startBlock,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\nimport LoggerInstance from './Logger'\n\nexport function generateDid(erc721Address: string, chainId: number): string {\n  erc721Address = Web3.utils.toChecksumAddress(erc721Address)\n  const checksum = sha256(erc721Address + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  try {\n    return sha256(data).toString()\n  } catch (e) {\n    LoggerInstance.error('getHash error: ', e.message)\n  }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance } from './Logger'\n\nexport async function signText(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(text, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(text, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n\nexport async function signWithHash(\n  web3: Web3,\n  text: string,\n  publicKey: string,\n  password?: string\n): Promise<string> {\n  const hash = web3.utils.utf8ToHex(text)\n  const isMetaMask =\n    web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n  try {\n    return await web3.eth.personal.sign(hash, publicKey, password)\n  } catch (e) {\n    if (isMetaMask) {\n      throw e\n    }\n    LoggerInstance.warn('Error on personal sign.')\n    LoggerInstance.warn(e)\n    try {\n      return await web3.eth.sign(hash, publicKey)\n    } catch (e2) {\n      LoggerInstance.error('Error on sign.')\n      LoggerInstance.error(e2)\n      throw new Error('Error executing personal sign')\n    }\n  }\n}\n","import Decimal from 'decimal.js'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from './ContractUtils'\nimport { minAbi } from './minAbi'\nimport LoggerInstance from './Logger'\nimport { TransactionReceipt } from 'web3-core'\nimport Web3 from 'web3'\nimport { GASLIMIT_DEFAULT } from '.'\nimport { Config } from '../models'\n\n/**\n * Estimate gas cost for approval function\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount\n * @param {String} force\n * @param {Contract} contractInstance optional contract instance\n * @return {Promise<number>}\n */\nexport async function estApprove(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  contractInstance?: Contract\n): Promise<number> {\n  const tokenContract = contractInstance || new web3.eth.Contract(minAbi, tokenAddress)\n\n  const gasLimitDefault = GASLIMIT_DEFAULT\n  let estGas\n  try {\n    estGas = await tokenContract.methods\n      .approve(spender, amount)\n      .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n  } catch (e) {\n    estGas = gasLimitDefault\n    LoggerInstance.error('estimate gas failed for approve!', e)\n  }\n  return estGas\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount  (always expressed as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {Config} config  configuration that provide values for web3 transaction gasFeeMultiplier, transactionBlockTimeout, transactionConfirmationBlocks, transactionPollingTimeout\n */\nexport async function approve(\n  web3: Web3,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  config?: Config\n): Promise<TransactionReceipt | string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender, config)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return currentAllowence\n    }\n  }\n  let result = null\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await estApprove(\n    web3,\n    account,\n    tokenAddress,\n    spender,\n    amountFormatted,\n    tokenContract\n  )\n\n  try {\n    result = await tokenContract.methods.approve(spender, amountFormatted).send({\n      from: account,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(web3, config)\n    })\n  } catch (e) {\n    LoggerInstance.error(\n      `ERRPR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n\n/**\n * Get balance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  config?: Config\n): Promise<string> {\n  const tokenContract = setContractDefaults(\n    new web3.eth.Contract(minAbi, tokenAddress),\n    config\n  )\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt)\n}\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import Decimal from 'decimal.js'\nimport { Pool } from '..'\n\nexport function calcMaxExactOut(balance: string): Decimal {\n  return new Decimal(balance).div(3.01)\n}\n\nexport function calcMaxExactIn(balance: string): Decimal {\n  return new Decimal(balance).div(2.01)\n}\nexport async function getMaxSwapExactOut(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactOut(reserve)\n}\n\nexport async function getMaxSwapExactIn(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxAddLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n\nexport async function getMaxRemoveLiquidity(\n  poolInstance: Pool,\n  poolAddress: string,\n  tokenAddress: string\n): Promise<Decimal> {\n  const reserve = await poolInstance.getReserve(poolAddress, tokenAddress)\n\n  return calcMaxExactIn(reserve)\n}\n","import { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types/'\nimport fetch from 'cross-fetch'\nexport class Aquarius {\n  public aquariusURL\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          signal: signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n}\n\nexport default Aquarius\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  unitsToAmount,\n  amountToUnits,\n  LoggerInstance\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport PoolTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/balancer/BPool.sol/BPool.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport {\n  CurrentFees,\n  TokenInOutMarket,\n  AmountsInMaxFee,\n  AmountsOutMaxFee,\n  PoolPriceAndFees\n} from '../../@types'\nimport { Config } from '../../models'\nimport {\n  getMaxAddLiquidity,\n  getMaxRemoveLiquidity,\n  getMaxSwapExactIn,\n  getMaxSwapExactOut\n} from '../../utils/PoolHelpers'\nimport Decimal from 'decimal.js'\nconst MaxUint256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\n\n/**\n * Provides an interface to Ocean friendly fork from Balancer BPool\n */\nexport class Pool {\n  public poolAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  private config: Config\n\n  constructor(web3: Web3, poolAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (poolAbi) this.poolAbi = poolAbi\n    else this.poolAbi = PoolTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   * Get user shares of pool tokens\n   * @param {String} account\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async sharesBalance(account: string, poolAddress: string): Promise<string> {\n    let result = null\n    try {\n      const token = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const balance = await token.methods.balanceOf(account).call()\n      result = this.web3.utils.fromWei(balance)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get shares of pool : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for setSwapFee\n   * @param {String} account\n   * @param {String} tokenAddress\n   * @param {String} spender\n   * @param {String} amount\n   * @param {String} force\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .setSwapFee(fee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Allows controller to change the swapFee\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} fee swap fee (1e17 = 10 % , 1e16 = 1% , 1e15 = 0.1%, 1e14 = 0.01%)\n   */\n  async setSwapFee(\n    account: string,\n    poolAddress: string,\n    fee: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress, {\n        from: account\n      }),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estSetSwapFee(account, poolAddress, fee)\n\n    try {\n      result = await pool.methods.setSwapFee(this.web3.utils.toWei(fee)).send({\n        from: account,\n        gas: estGas,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to set pool swap fee: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns number of tokens bounded to pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getNumTokens(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getNumTokens().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get number of tokens: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total supply of pool shares\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getPoolSharesTotalSupply(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    try {\n      const result = await pool.methods.totalSupply().call()\n      amount = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total supply of pool shares: ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get tokens composing this poo\n   * Returns tokens bounded to pool, before the pool is finalizedl\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getCurrentTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getCurrentTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get tokens composing this pool: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get the final tokens composing this pool\n   * Returns tokens bounded to pool, after the pool was finalized\n   * @param {String} poolAddress\n   * @return {String[]}\n   */\n  async getFinalTokens(poolAddress: string): Promise<string[]> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getFinalTokens().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get the final tokens composing this pool ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Returns the current controller address (ssBot)\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getController(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getController().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool controller address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current baseToken address of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getBaseToken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getBaseTokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get baseToken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current datatoken address\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getDatatoken(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getDatatokenAddress().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get datatoken address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get getMarketFee\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.getMarketFee().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get getMarketFee: ${e.message}`)\n    }\n    return this.web3.utils.fromWei(result).toString()\n  }\n\n  /**\n   * Get marketFeeCollector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getMarketFeeCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._publishMarketCollector().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get marketFeeCollector address: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   * Get OPC Collector of this pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getOPCCollector(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods._opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get if a token is bounded to a pool\n   *  Returns true if token is bound\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {Boolean}\n   */\n  async isBound(poolAddress: string, token: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isBound(token).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to check whether a token \\\n      bounded to a pool. ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Returns the current token reserve amount\n   * @param {String} poolAddress\n   * @param {String} token  Address of the token to be checked\n   * @return {String}\n   */\n  async getReserve(poolAddress: string, token: string): Promise<string> {\n    let amount = null\n    try {\n      const pool = setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi, poolAddress),\n        this.config\n      )\n      const result = await pool.methods.getBalance(token).call()\n      amount = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get how many tokens \\\n      are in the pool: ${e.message}`)\n    }\n    return amount.toString()\n  }\n\n  /**\n   * Get if a pool is finalized\n   * Returns true if pool is finalized\n   * @param {String} poolAddress\n   * @return {Boolean}\n   */\n  async isFinalized(poolAddress: string): Promise<boolean> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await pool.methods.isFinalized().call()\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to check whether pool is finalized: ${e.message}`\n      )\n    }\n    return result\n  }\n\n  /**\n   *  Returns the current Liquidity Providers swap fee\n   * @param {String} poolAddress\n   * @return {String} Swap fee. To get the percentage value, substract by 100. E.g. `0.1` represents a 10% swap fee.\n   */\n  async getSwapFee(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let fee = null\n    try {\n      const result = await pool.methods.getSwapFee().call()\n      fee = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get pool fee: ${e.message}`)\n    }\n    return fee\n  }\n\n  /**\n   * Returns normalized weight of a token.\n   * The combined normalized weights of all tokens will sum up to 1.\n   * (Note: the actual sum may be 1 plus or minus a few wei due to division precision loss)\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getNormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getNormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get normalized weight of a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   *  Returns denormalized weight of a token\n   * @param {String} poolAddress\n   * @param {String} token token to be checked\n   * @return {String}\n   */\n  async getDenormalizedWeight(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getDenormalizedWeight(token).call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get denormalized weight of a token in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * getTotalDenormalizedWeight\n   * Returns total denormalized weught of the pool\n   * @param {String} poolAddress\n   * @return {String}\n   */\n  async getTotalDenormalizedWeight(poolAddress: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.getTotalDenormalizedWeight().call()\n      weight = this.web3.utils.fromWei(result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get total denormalized weight in pool ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Returns the current fee of publishingMarket\n   * Get Market Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getMarketFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.publishMarketFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get market fees for a token: ${e.message}`)\n    }\n    return weight\n  }\n\n  /**\n   * Get Community  Get the current amount of fees which can be withdrawned by the Market\n   * @return {CurrentFees}\n   */\n  async getCurrentMarketFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get getCurrentOPFFees  Get the current amount of fees which can be withdrawned by OPF\n   * @return {CurrentFees}\n   */\n  async getCurrentOPCFees(poolAddress: string): Promise<CurrentFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    try {\n      const currentMarketFees = await pool.methods.getCurrentOPCFees().call()\n      return currentMarketFees\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n  }\n\n  /**\n   * Get Community Fees available to be collected for a specific token\n   * @param {String} poolAddress\n   * @param {String} token token we want to check fees\n   * @return {String}\n   */\n  async getCommunityFees(poolAddress: string, token: string): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let weight = null\n    try {\n      const result = await pool.methods.communityFees(token).call()\n      weight = await unitsToAmount(this.web3, token, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to get community fees for a token: ${e.message}`\n      )\n    }\n    return weight\n  }\n\n  /**\n   * Estimate gas cost for collectOPF\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOPC(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectOPC()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect opf fee - can be called by anyone\n   * @param {String} address\n   * @param {String} poolAddress\n   * @return {TransactionReceipt}\n   */\n  async collectOPC(address: string, poolAddress: string): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectOPC(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectOPC().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for collectMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    address: string,\n    poolAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .collectMarketFee()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * collectOPF - collect market fees - can be called by the publishMarketCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} to address that will receive fees\n   * @return {TransactionReceipt}\n   */\n  async collectMarketFee(\n    address: string,\n    poolAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const estGas = await this.estCollectMarketFee(address, poolAddress)\n\n    try {\n      result = await pool.methods.collectMarketFee().send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updatePublishMarketFee\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market address\n   * @param {String} newPublishMarketSwapFee new market swap fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .updatePublishMarketFee(newPublishMarketAddress, newPublishMarketSwapFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * updatePublishMarketFee - sets a new  newPublishMarketAddress and new newPublishMarketSwapFee- can be called only by the marketFeeCollector\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} newPublishMarketAddress new market fee collector address\n   * @param {String} newPublishMarketSwapFee fee recieved by the publisher market when a dt is swaped from a pool, percent\n   * @return {TransactionReceipt}\n   */\n  async updatePublishMarketFee(\n    address: string,\n    poolAddress: string,\n    newPublishMarketAddress: string,\n    newPublishMarketSwapFee: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getMarketFeeCollector(poolAddress)) !== address) {\n      throw new Error(`Caller is not MarketFeeCollector`)\n    }\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estUpdatePublishMarketFee(\n      address,\n      poolAddress,\n      newPublishMarketAddress,\n      this.web3.utils.toWei(newPublishMarketSwapFee)\n    )\n    try {\n      result = await pool.methods\n        .updatePublishMarketFee(\n          newPublishMarketAddress,\n          this.web3.utils.toWei(newPublishMarketSwapFee)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to updatePublishMarketFee : ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps an exact amount of tokensIn to get a mimum amount of tokenOut\n   * Trades an exact tokenAmountIn of tokenIn taken from the caller by the pool,\n   * in exchange for at least minAmountOut of tokenOut given to the caller from the pool, with a maximum marginal price of maxPrice.\n   * Returns (tokenAmountOut, spotPriceAfter), where tokenAmountOut is the amount of token that came out of the pool,\n   * and spotPriceAfter is the new marginal spot price, ie, the result of getSpotPrice after the call.\n   * (These values are what are limited by the arguments; you are guaranteed tokenAmountOut >= minAmountOut and spotPriceAfter <= maxPrice).\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket object contianing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsInMaxFee} amountsInOutMaxFee object contianing tokenAmountIn, minAmountOut, maxPrice, consumeMarketSwapFee\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsInMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountIn(\n      address,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const tokenAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.tokenAmountIn\n    )\n\n    const minAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.minAmountOut\n    )\n\n    let result = null\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountIn(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            tokenAmountIn,\n            minAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount in : ${e.message}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Estimate gas cost for swapExactAmountOut\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSwapExactAmountOut(\n    address: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? await amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Swaps a maximum  maxAmountIn of tokensIn to get an exact amount of tokenOut\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {TokenInOutMarket} tokenInOutMarket Object containing addresses like tokenIn, tokenOut, consumeMarketFeeAddress\n   * @param {AmountsOutMaxFee} amountsInOutMaxFee Object containging maxAmountIn,tokenAmountOut,maxPrice, consumeMarketSwapFee]\n   * @return {TransactionReceipt}\n   */\n  async swapExactAmountOut(\n    account: string,\n    poolAddress: string,\n    tokenInOutMarket: TokenInOutMarket,\n    amountsInOutMaxFee: AmountsOutMaxFee\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenInOutMarket.tokenIn)\n    if (new Decimal(amountsInOutMaxFee.tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const estGas = await this.estSwapExactAmountOut(\n      account,\n      poolAddress,\n      tokenInOutMarket,\n      amountsInOutMaxFee\n    )\n\n    const maxAmountIn = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenIn,\n      amountsInOutMaxFee.maxAmountIn\n    )\n\n    const tokenAmountOut = await amountToUnits(\n      this.web3,\n      tokenInOutMarket.tokenOut,\n      amountsInOutMaxFee.tokenAmountOut\n    )\n\n    const maxPrice = amountsInOutMaxFee.maxPrice\n      ? amountToUnits(\n          this.web3,\n          await this.getBaseToken(poolAddress),\n          amountsInOutMaxFee.maxPrice\n        )\n      : MaxUint256\n\n    try {\n      result = await pool.methods\n        .swapExactAmountOut(\n          [\n            tokenInOutMarket.tokenIn,\n            tokenInOutMarket.tokenOut,\n            tokenInOutMarket.marketFeeAddress\n          ],\n          [\n            maxAmountIn,\n            tokenAmountOut,\n            maxPrice,\n            this.web3.utils.toWei(amountsInOutMaxFee.swapMarketFee)\n          ]\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to swap exact amount out: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinPool method\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinPool(poolAmountOut, maxAmountsIn)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Adds dual side liquidity to the pool (both datatoken and basetoken)\n   * This will pull some of each of the currently trading tokens in the pool,\n   * meaning you must have called approve for each token for this pool.\n   * These values are limited by the array of maxAmountsIn in the order of the pool tokens.\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} poolAmountOut expected number of pool shares that you will get\n   * @param {String[]} maxAmountsIn array with maxium amounts spent\n   * @return {TransactionReceipt}\n   */\n  async joinPool(\n    address: string,\n    poolAddress: string,\n    poolAmountOut: string,\n    maxAmountsIn: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMaxAmountsIn = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], maxAmountsIn[i])\n      weiMaxAmountsIn.push(amount)\n    }\n\n    let result = null\n\n    const estGas = await this.estJoinPool(\n      address,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountOut),\n      weiMaxAmountsIn\n    )\n\n    try {\n      result = await pool.methods\n        .joinPool(this.web3.utils.toWei(poolAmountOut), weiMaxAmountsIn)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to join pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitPool\n   * @param {String} address\n   * @param {String} poolAddress\n ``* @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut  aarray with minimum amount of tokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitPool(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[],\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitPool(poolAmountIn, minAmountsOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes dual side liquidity from the pool (both datatoken and basetoken)\n   * Exit the pool, paying poolAmountIn pool tokens and getting some of each of the currently trading tokens in return.\n   * These values are limited by the array of minAmountsOut in the order of the pool tokens.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn amount of pool shares spent\n   * @param {String[]} minAmountsOut array with minimum amount of tokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitPool(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minAmountsOut: string[]\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    const weiMinAmountsOut = []\n    const tokens = await this.getFinalTokens(poolAddress)\n\n    for (let i = 0; i < 2; i++) {\n      const amount = await amountToUnits(this.web3, tokens[i], minAmountsOut[i])\n      weiMinAmountsOut.push(amount)\n    }\n    let result = null\n    const estGas = await this.estExitPool(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      weiMinAmountsOut\n    )\n\n    try {\n      result = await pool.methods\n        .exitPool(this.web3.utils.toWei(poolAmountIn), weiMinAmountsOut)\n        .send({\n          from: account,\n          gas: estGas,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to exit pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for joinswapExternAmountIn\n   * @param {String} address\n   * @param {String} poolAddress\n   * @param {String} tokenIn\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estJoinswapExternAmountIn(\n    address: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .joinswapExternAmountIn(tokenAmountIn, minPoolAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side add liquidity to the pool,\n   * expecting a minPoolAmountOut of shares for spending tokenAmountIn basetokens.\n   * Pay tokenAmountIn of baseToken to join the pool, getting poolAmountOut of the pool shares.\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} tokenAmountIn exact number of base tokens to spend\n   * @param {String} minPoolAmountOut minimum of pool shares expectex\n   * @return {TransactionReceipt}\n   */\n  async joinswapExternAmountIn(\n    account: string,\n    poolAddress: string,\n    tokenAmountIn: string,\n    minPoolAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenIn = await this.getBaseToken(poolAddress)\n    const maxSwap = await getMaxAddLiquidity(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n    const estGas = await this.estJoinswapExternAmountIn(\n      account,\n      poolAddress,\n      amountInFormatted,\n      this.web3.utils.toWei(minPoolAmountOut)\n    )\n\n    try {\n      result = await pool.methods\n        .joinswapExternAmountIn(\n          amountInFormatted,\n          this.web3.utils.toWei(minPoolAmountOut)\n        )\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay tokens in order to \\\n      join the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for exitswapPoolAmountIn\n   * @param {String} address\n   *  @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estExitswapPoolAmountIn(\n    address: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const poolContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.poolAbi as AbiItem[], poolAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await poolContract.methods\n        .exitswapPoolAmountIn(poolAmountIn, minTokenAmountOut)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Single side remove liquidity from the pool,\n   * expecting a minAmountOut of basetokens for spending poolAmountIn pool shares\n   * Pay poolAmountIn pool shares into the pool, getting minTokenAmountOut of the baseToken\n   * @param {String} account\n   * @param {String} poolAddress\n   * @param {String} poolAmountIn exact number of pool shares to spend\n   * @param {String} minTokenAmountOut minimum amount of basetokens expected\n   * @return {TransactionReceipt}\n   */\n  async exitswapPoolAmountIn(\n    account: string,\n    poolAddress: string,\n    poolAmountIn: string,\n    minTokenAmountOut: string\n  ): Promise<TransactionReceipt> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let result = null\n    const tokenOut = await this.getBaseToken(poolAddress)\n\n    const tokenAmountOut = await this.calcSingleOutGivenPoolIn(\n      poolAddress,\n      tokenOut,\n      poolAmountIn\n    )\n\n    const maxSwap = await getMaxRemoveLiquidity(this, poolAddress, tokenOut)\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const minTokenOutFormatted = await amountToUnits(\n      this.web3,\n      await this.getBaseToken(poolAddress),\n      minTokenAmountOut\n    )\n    const estGas = await this.estExitswapPoolAmountIn(\n      account,\n      poolAddress,\n      this.web3.utils.toWei(poolAmountIn),\n      minTokenOutFormatted\n    )\n\n    try {\n      result = await pool.methods\n        .exitswapPoolAmountIn(this.web3.utils.toWei(poolAmountIn), minTokenOutFormatted)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to pay pool shares into the pool: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Return the spot price of swapping tokenIn to tokenOut\n   * @param {String} poolAddress\n   * @param {String} tokenIn in token\n   * @param {String} tokenOut out token\n   * @param {String} swapMarketFe consume market swap fee\n   * @return {String}\n   */\n  async getSpotPrice(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    swapMarketFee: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let decimalsTokenIn = 18\n    let decimalsTokenOut = 18\n\n    const tokenInContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenIn),\n      this.config\n    )\n    const tokenOutContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], tokenOut),\n      this.config\n    )\n    try {\n      decimalsTokenIn = await tokenInContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n    try {\n      decimalsTokenOut = await tokenOutContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: FAILED TO CALL DECIMALS(), USING 18 ${e.message}`)\n    }\n\n    let price = null\n    try {\n      price = await pool.methods\n        .getSpotPrice(tokenIn, tokenOut, this.web3.utils.toWei(swapMarketFee))\n        .call()\n      price = new BigNumber(price.toString())\n    } catch (e) {\n      LoggerInstance.error(\n        'ERROR: Failed to get spot price of swapping tokenIn to tokenOut'\n      )\n    }\n\n    let decimalsDiff\n    if (decimalsTokenIn > decimalsTokenOut) {\n      decimalsDiff = decimalsTokenIn - decimalsTokenOut\n      price = new BigNumber(price / 10 ** decimalsDiff)\n      price = price / 10 ** decimalsTokenOut\n    } else {\n      decimalsDiff = decimalsTokenOut - decimalsTokenIn\n      price = new BigNumber(price * 10 ** (2 * decimalsDiff))\n      price = price / 10 ** decimalsTokenOut\n    }\n\n    return price.toString()\n  }\n\n  /**\n   * How many tokensIn do you need in order to get exact tokenAmountOut.\n   * Returns: tokenAmountIn, swapFee, opcFee , consumeMarketSwapFee, publishMarketSwapFee\n   * Returns: tokenAmountIn, LPFee, opcFee , publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param swapMarketFee consume market swap fee\n   */\n  public async getAmountInExactOut(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountOut: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactOut(this, poolAddress, tokenIn)\n\n    if (new Decimal(tokenAmountOut).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountOut is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountOutFormatted = await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountInExactOut(\n          tokenIn,\n          tokenOut,\n          amountOutFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountIn),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcInGivenOut ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   *  How many tokensOut you will get for a exact tokenAmountIn\n   *  Returns: tokenAmountOut, LPFee, opcFee ,  publishMarketSwapFee, consumeMarketSwapFee\n   * @param tokenIn token to be swaped\n   * @param tokenOut token to get\n   * @param tokenAmountOut exact amount of tokenOut\n   * @param _consumeMarketSwapFee consume market swap fee\n   */\n  public async getAmountOutExactIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenOut: string,\n    tokenAmountIn: string,\n    swapMarketFee: string\n  ): Promise<PoolPriceAndFees> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n\n    const maxSwap = await getMaxSwapExactIn(this, poolAddress, tokenIn)\n    if (new Decimal(tokenAmountIn).greaterThan(maxSwap)) {\n      throw new Error(`tokenAmountIn is greater than ${maxSwap.toString()}`)\n    }\n\n    const amountInFormatted = await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .getAmountOutExactIn(\n          tokenIn,\n          tokenOut,\n          amountInFormatted,\n          this.web3.utils.toWei(swapMarketFee)\n        )\n        .call()\n\n      amount = {\n        tokenAmount: await unitsToAmount(this.web3, tokenOut, result.tokenAmountOut),\n        liquidityProviderSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.lpFeeAmount\n        ),\n        oceanFeeAmount: await unitsToAmount(this.web3, tokenIn, result.oceanFeeAmount),\n        publishMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.publishMarketSwapFeeAmount\n        ),\n        consumeMarketSwapFeeAmount: await unitsToAmount(\n          this.web3,\n          tokenIn,\n          result.consumeMarketSwapFeeAmount\n        )\n      }\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calcOutGivenIn ${e.message}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares obtain by staking exact tokenAmountIn tokens\n   * @param tokenIn tokenIn\n   * @param tokenAmountIn exact number of tokens staked\n   */\n  public async calcPoolOutGivenSingleIn(\n    poolAddress: string,\n    tokenIn: string,\n    tokenAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolOutSingleIn(\n          tokenIn,\n          await amountToUnits(this.web3, tokenIn, tokenAmountIn)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolOutGivenSingleIn : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of tokens to be staked to the pool in order to get an exact number of poolshares\n   * @param tokenIn tokenIn\n   * @param poolAmountOut expected amount of pool shares\n   */\n  public async calcSingleInGivenPoolOut(\n    poolAddress: string,\n    tokenIn: string,\n    poolAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n    const amountFormatted = await amountToUnits(this.web3, poolAddress, poolAmountOut)\n    try {\n      const result = await pool.methods\n        .calcSingleInPoolOut(tokenIn, amountFormatted)\n\n        .call()\n\n      amount = await unitsToAmount(this.web3, tokenIn, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate SingleInGivenPoolOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Returns expected amount of tokenOut for removing exact poolAmountIn pool shares from the pool\n   * @param tokenOut tokenOut\n   * @param poolAmountIn amount of shares spent\n   */\n  public async calcSingleOutGivenPoolIn(\n    poolAddress: string,\n    tokenOut: string,\n    poolAmountIn: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcSingleOutPoolIn(\n          tokenOut,\n          await amountToUnits(this.web3, poolAddress, poolAmountIn)\n        )\n        .call()\n      amount = await unitsToAmount(this.web3, tokenOut, result)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to calculate SingleOutGivenPoolIn : ${e}`)\n    }\n    return amount\n  }\n\n  /**\n   * Returns number of poolshares needed to withdraw exact tokenAmountOut tokens\n   * @param tokenOut tokenOut\n   * @param tokenAmountOut expected amount of tokensOut\n   */\n  public async calcPoolInGivenSingleOut(\n    poolAddress: string,\n    tokenOut: string,\n    tokenAmountOut: string\n  ): Promise<string> {\n    const pool = setContractDefaults(\n      new this.web3.eth.Contract(this.poolAbi, poolAddress),\n      this.config\n    )\n    let amount = null\n\n    try {\n      const result = await pool.methods\n        .calcPoolInSingleOut(\n          tokenOut,\n          await amountToUnits(this.web3, tokenOut, tokenAmountOut)\n        )\n        .call()\n\n      amount = await unitsToAmount(this.web3, poolAddress, result)\n    } catch (e) {\n      LoggerInstance.error(\n        `ERROR: Failed to calculate PoolInGivenSingleOut : ${e.message}`\n      )\n    }\n    return amount\n  }\n\n  /**\n   * Get LOG_SWAP encoded topic\n   * @return {String}\n   */\n  public getSwapEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_SWAP' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_JOIN encoded topic\n   * @return {String}\n   */\n  public getJoinEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_JOIN' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n\n  /**\n   * Get LOG_EXIT encoded topic\n   * @return {String}\n   */\n  public getExitEventSignature(): string {\n    const abi = this.poolAbi as AbiItem[]\n    const eventdata = abi.find(function (o) {\n      if (o.name === 'LOG_EXIT' && o.type === 'event') return o\n    })\n    const topic = this.web3.eth.abi.encodeEventSignature(eventdata as any)\n    return topic\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport defaultDispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport {\n  LoggerInstance as logger,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils/'\nimport { Datatoken } from '../../tokens'\nimport { Config } from '../../models/index.js'\n\nexport interface DispenserToken {\n  active: boolean\n  owner: string\n  maxTokens: string\n  maxBalance: string\n  balance: string\n  isMinter: boolean\n  allowedSwapper: string\n}\n\nexport class Dispenser {\n  public GASLIMIT_DEFAULT = 1000000\n  public web3: Web3 = null\n  public dispenserAddress: string\n  public config: Config\n  public dispenserAbi: AbiItem | AbiItem[]\n  public dispenserContract: Contract\n\n  /**\n   * Instantiate Dispenser\n   * @param {any} web3\n   * @param {String} dispenserAddress\n   * @param {any} dispenserABI\n   */\n  constructor(\n    web3: Web3,\n    dispenserAddress: string = null,\n    dispenserAbi: AbiItem | AbiItem[] = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.dispenserAddress = dispenserAddress\n    this.dispenserAbi = dispenserAbi || (defaultDispenserAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    if (web3)\n      this.dispenserContract = setContractDefaults(\n        new this.web3.eth.Contract(this.dispenserAbi, this.dispenserAddress),\n        this.config\n      )\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    try {\n      const result: DispenserToken = await this.dispenserContract.methods\n        .status(dtAdress)\n        .call()\n      result.maxTokens = this.web3.utils.fromWei(result.maxTokens)\n      result.maxBalance = this.web3.utils.fromWei(result.maxBalance)\n      result.balance = this.web3.utils.fromWei(result.balance)\n      return result\n    } catch (e) {\n      logger.warn(`No dispenser available for datatoken: ${dtAdress}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas cost for create method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  if !=0, only this address can request DTs\n   * @return {Promise<any>}\n   */\n  public async estGasCreate(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.dispenserContract.methods\n        .create(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance),\n          address,\n          allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async create(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreate(\n      dtAddress,\n      address,\n      maxTokens,\n      maxBalance,\n      allowedSwapper\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await this.dispenserContract.methods\n      .create(\n        dtAddress,\n        this.web3.utils.toWei(maxTokens),\n        this.web3.utils.toWei(maxBalance),\n        address,\n        allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for activate method\n   * @param {String} dtAddress\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasActivate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async activate(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasActivate(dtAddress, maxTokens, maxBalance, address)\n      const trxReceipt = await this.dispenserContract.methods\n        .activate(\n          dtAddress,\n          this.web3.utils.toWei(maxTokens),\n          this.web3.utils.toWei(maxBalance)\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for deactivate method\n   * @param {String} dtAddress\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<any>}\n   */\n  public async estGasDeactivate(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .deactivate(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async deactivate(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasDeactivate(dtAddress, address)\n      const trxReceipt = await this.dispenserContract.methods.deactivate(dtAddress).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for setAllowedSwapper method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasSetAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async setAllowedSwapper(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    try {\n      const estGas = await this.estGasSetAllowedSwapper(\n        dtAddress,\n        address,\n        newAllowedSwapper\n      )\n      const trxReceipt = await this.dispenserContract.methods\n        .setAllowedSwapper(dtAddress, newAllowedSwapper)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to activate dispenser: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for dispense method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasDispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async dispense(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasDispense(dtAddress, address, amount, destination)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .dispense(dtAddress, this.web3.utils.toWei(amount), destination)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to dispense tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Estimate gas for ownerWithdraw method\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<any>}\n   */\n  public async estGasOwnerWithdraw(dtAddress: string, address: string): Promise<any> {\n    let estGas\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    try {\n      estGas = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<TransactionReceipt>} TransactionReceipt\n   */\n  public async ownerWithdraw(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasOwnerWithdraw(dtAddress, address)\n    try {\n      const trxReceipt = await this.dispenserContract.methods\n        .ownerWithdraw(dtAddress)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      logger.error(`ERROR: Failed to withdraw tokens: ${e.message}`)\n    }\n    return null\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import defaultFixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils/types'\nimport Web3 from 'web3'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults,\n  amountToUnits,\n  unitsToAmount,\n  ZERO_ADDRESS\n} from '../../utils'\nimport { Config } from '../../models/index.js'\nimport { PriceAndFees } from '../..'\n\nexport interface FixedPriceExchange {\n  active: boolean\n  exchangeOwner: string\n  datatoken: string\n  baseToken: string\n  fixedRate: string\n  dtDecimals: string\n  btDecimals: string\n  dtBalance: string\n  btBalance: string\n  dtSupply: string\n  btSupply: string\n  withMint: boolean\n  allowedSwapper: string\n  exchangeId?: string\n}\n\nexport interface FeesInfo {\n  opcFee: string\n  marketFee: string\n  marketFeeCollector: string\n  marketFeeAvailable: string\n  oceanFeeAvailable: string\n  exchangeId: string\n}\nexport interface FixedPriceSwap {\n  exchangeId: string\n  caller: string\n  baseTokenAmount: string\n  datatokenAmount: string\n}\n\n/* eslint-disable no-unused-vars */\nexport enum FixedRateCreateProgressStep {\n  CreatingExchange,\n  ApprovingDatatoken\n}\n/* eslint-enable no-unused-vars */\n\nexport class FixedRateExchange {\n  public GASLIMIT_DEFAULT = 1000000\n  /** Ocean related functions */\n  public oceanAddress: string = null\n  public fixedRateAddress: string\n  public fixedRateExchangeAbi: AbiItem | AbiItem[]\n  public fixedRateContract: Contract\n  public web3: Web3\n  public contract: Contract = null\n\n  public config: Config\n  public ssAbi: AbiItem | AbiItem[]\n\n  /**\n   * Instantiate FixedRateExchange\n   * @param {any} web3\n   * @param {any} fixedRateExchangeAbi\n   */\n  constructor(\n    web3: Web3,\n    fixedRateAddress: string,\n    fixedRateExchangeAbi: AbiItem | AbiItem[] = null,\n    oceanAddress: string = null,\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.fixedRateExchangeAbi =\n      fixedRateExchangeAbi || (defaultFixedRateExchangeAbi.abi as AbiItem[])\n    this.oceanAddress = oceanAddress\n    this.fixedRateAddress = fixedRateAddress\n    this.contract = setContractDefaults(\n      new this.web3.eth.Contract(this.fixedRateExchangeAbi, this.fixedRateAddress),\n      this.config\n    )\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    return amountToUnits(this.web3, token, amount)\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    return unitsToAmount(this.web3, token, amount)\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Estimate gas cost for buyDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to buy\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee fee recieved by the consume market when a dt is bought from a fixed rate exchange, percent\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estBuyDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .buyDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async buyDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount\n    )\n\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .buyDT(\n          exchangeId,\n          dtAmountFormatted,\n          maxBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Estimate gas cost for sellDT\n   * @param {String} account\n   * @param {String} dtAmount datatoken amount we want to sell\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSellDT(\n    account: string,\n    datatokenAddress: string,\n    dtAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string,\n    consumeMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .sellDT(\n          datatokenAddress,\n          dtAmount,\n          maxBaseTokenAmount,\n          consumeMarketAddress,\n          consumeMarketFee\n        )\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async sellDT(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0'\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount\n    )\n    const estGas = await this.estBuyDT(\n      address,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    try {\n      const trxReceipt = await this.contract.methods\n        .sellDT(\n          exchangeId,\n          dtAmountFormatted,\n          minBtFormatted,\n          consumeMarketAddress,\n          consumeMarketFeeFormatted\n        )\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to sell datatokens: ${e.message}`)\n      return null\n    }\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetRate(\n    account: string,\n    exchangeId: string,\n    newRate: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, await this.web3.utils.toWei(newRate))\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setRate(\n    address: string,\n    exchangeId: string,\n    newRate: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(address, exchangeId, newRate)\n    const trxReceipt = await this.contract.methods\n      .setRate(exchangeId, this.web3.utils.toWei(newRate))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setRate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper new allowed swapper address\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetAllowedSwapper(\n    account: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .setRate(exchangeId, newAllowedSwapper)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setAllowedSwapper(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetAllowedSwapper(address, exchangeId, newAllowedSwapper)\n    const trxReceipt = await this.contract.methods\n      .setAllowedSwapper(exchangeId, newAllowedSwapper)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n\n    const estGas = await this.estActivate(address, exchangeId)\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivate(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleExchangeState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivate(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods.toggleExchangeState(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDTSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).datatoken,\n      dtSupply\n    )\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBTSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      btSupply\n    )\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenOutDT - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenOutDT(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(fixedRateExchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.baseTokenAmount\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.marketFeeAmount\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.oceanFeeAmount\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        result.consumeMarketFeeAmount\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBTOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const result = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(exchange.datatoken, datatokenAmount),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result[0]\n    )\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    result.dtDecimals = result.dtDecimals.toString()\n    result.btDecimals = result.btDecimals.toString()\n    result.dtBalance = await this.unitsToAmount(result.datatoken, result.dtBalance)\n    result.btBalance = await this.unitsToAmount(result.baseToken, result.btBalance)\n    result.dtSupply = await this.unitsToAmount(result.datatoken, result.dtSupply)\n    result.btSupply = await this.unitsToAmount(result.baseToken, result.btSupply)\n    result.fixedRate = this.web3.utils.fromWei(result.fixedRate)\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    result.opcFee = this.web3.utils.fromWei(result.opcFee.toString())\n    result.marketFee = this.web3.utils.fromWei(result.marketFee.toString())\n\n    result.marketFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.marketFeeAvailable\n    )\n    result.oceanFeeAvailable = await this.unitsToAmount(\n      (\n        await this.getExchange(exchangeId)\n      ).baseToken,\n      result.oceanFeeAvailable\n    )\n\n    result.exchangeId = exchangeId\n    return result\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const result = await this.contract.methods.isActive(exchangeId).call()\n    return result\n  }\n\n  /**\n   * Estimate gas cost for activate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estActivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId, true)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async activateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.estActivateMint(address, exchangeId)\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, true)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for deactivate\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estDeactivateMint(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .toggleMintState(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async deactivateMint(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.estDeactivate(address, exchangeId)\n\n    const trxReceipt = await this.contract.methods\n      .toggleMintState(exchangeId, false)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectBT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectBT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectBT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectBT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectBT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.baseToken, amount)\n    const trxReceipt = await this.contract.methods.collectBT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecDT\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectDT(\n    account: string,\n    exchangeId: string,\n    amount: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    try {\n      estGas = await fixedRate.methods\n        .collectDT(exchangeId, amountWei)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to erc20.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectDT(\n    address: string,\n    exchangeId: string,\n    amount: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectDT(address, exchangeId, amount)\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(fixedrate.datatoken, amount)\n    const trxReceipt = await this.contract.methods.collectDT(exchangeId, amountWei).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collecMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectMarketFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectMarketFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectMarketFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectMarketFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for collectOceanFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estCollectOceanFee(\n    account: string,\n    exchangeId: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .collectMarketFee(exchangeId)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async collectOceanFee(\n    address: string,\n    exchangeId: string\n  ): Promise<TransactionReceipt> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.estCollectOceanFee(address, exchangeId)\n    const trxReceipt = await this.contract.methods.collectOceanFee(exchangeId).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.opcCollector().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPC Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  async getRouter(): Promise<string> {\n    let result = null\n    try {\n      result = await this.contract.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    let result = null\n    try {\n      result = await (await this.getExchange(exchangeId)).exchangeOwner\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get OPF Collector address: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFee\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFee(\n    account: string,\n    exchangeId: string,\n    newMarketFee: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFee(exchangeId, newMarketFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFee(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estSetRate(\n      address,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFee(exchangeId, this.web3.utils.toWei(newMarketFee))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for updateMarketFeeCollector\n   * @param {String} account\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estUpdateMarketFeeCollector(\n    account: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const fixedRate = contractInstance || this.fixedRateContract\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await fixedRate.methods\n        .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async updateMarketFeeCollector(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estUpdateMarketFeeCollector(\n      address,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    const trxReceipt = await this.contract.methods\n      .updateMarketFeeCollector(exchangeId, newMarketFeeCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils/types'\nimport { TransactionReceipt } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  configHelperNetworks,\n  setContractDefaults\n} from '../../utils'\nimport BigNumber from 'bignumber.js'\nimport SideStakingTemplate from '@oceanprotocol/contracts/artifacts/contracts/pools/ssContracts/SideStaking.sol/SideStaking.json'\nimport defaultErc20Abi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport { Config } from '../../models'\n\nexport class SideStaking {\n  public ssAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public GASLIMIT_DEFAULT = 1000000\n  public config: Config\n\n  constructor(web3: Web3, ssAbi: AbiItem | AbiItem[] = null, config?: Config) {\n    if (ssAbi) this.ssAbi = ssAbi\n    else this.ssAbi = SideStakingTemplate.abi as AbiItem[]\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  async amountToUnits(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) * 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  async unitsToAmount(token: string, amount: string): Promise<string> {\n    let decimals = 18\n    const tokenContract = setContractDefaults(\n      new this.web3.eth.Contract(defaultErc20Abi.abi as AbiItem[], token),\n      this.config\n    )\n    try {\n      decimals = await tokenContract.methods.decimals().call()\n    } catch (e) {\n      LoggerInstance.error('ERROR: FAILED TO CALL DECIMALS(), USING 18')\n    }\n\n    const amountFormatted = new BigNumber(parseInt(amount) / 10 ** decimals)\n\n    return amountFormatted.toString()\n  }\n\n  /**\n   * Get (total vesting amount + token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods\n        .getDatatokenCirculatingSupply(datatokenAddress)\n        .call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result.toString()\n  }\n\n  /**\n   * Get actual dts in circulation (vested token withdrawn from the contract +\n         token released from the contract when adding liquidity)\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getDatatokenCurrentCirculatingSupply(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    try {\n      const sideStaking = setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi, ssAddress),\n        this.config\n      )\n      let result = null\n      result = await sideStaking.methods\n        .getDatatokenCurrentCirculatingSupply(datatokenAddress)\n        .call()\n      return result.toString()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n  }\n\n  /**\n   * Get Publisher address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatoken address\n   * @return {String}\n   */\n  async getPublisherAddress(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPublisherAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseToken(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get Pool Address\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getPoolAddress(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getPoolAddress(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get baseToken balance in the contract\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getBaseTokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getBaseTokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get dt balance in the staking contract available for being added as liquidity\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getDatatokenBalance(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getDatatokenBalance(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get block when vesting ends\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String} end block for vesting amount\n   */\n  async getvestingEndBlock(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingEndBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get total amount vesting\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmount(ssAddress: string, datatokenAddress: string): Promise<string> {\n    const sideStaking = new this.web3.eth.Contract(this.ssAbi, ssAddress)\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmount(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Get last block publisher got some vested tokens\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingLastBlock(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingLastBlock(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    return result\n  }\n\n  /**\n   * Get how much has been taken from the vesting amount\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {String}\n   */\n  async getvestingAmountSoFar(\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.getvestingAmountSoFar(datatokenAddress).call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get: ${e.message}`)\n    }\n    result = await this.unitsToAmount(datatokenAddress, result)\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estGetVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .getVesting(datatokenAddress)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async getVesting(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estGetVesting(\n      account,\n      ssAddress,\n      datatokenAddress,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods.getVesting(datatokenAddress).send({\n        from: account,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Estimate gas cost for getVesting\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<number>}\n   */\n  public async estSetPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number,\n    contractInstance?: Contract\n  ): Promise<number> {\n    const sideStaking =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.ssAbi as AbiItem[], ssAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .estimateGas({ from: account }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Send vested tokens available to the publisher address, can be called by anyone\n   *\n   * @param {String} account\n   * @param {String} ssAddress side staking contract address\n   * @param {String} datatokenAddress datatokenAddress\n   * @return {TransactionReceipt}\n   */\n  async setPoolSwapFee(\n    account: string,\n    ssAddress: string,\n    datatokenAddress: string,\n    poolAddress: string,\n    swapFee: number\n  ): Promise<TransactionReceipt> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n\n    const estGas = await this.estSetPoolSwapFee(\n      account,\n      ssAddress,\n      datatokenAddress,\n      poolAddress,\n      swapFee,\n      sideStaking\n    )\n    try {\n      result = await sideStaking.methods\n        .setPoolSwapFee(datatokenAddress, poolAddress, swapFee)\n        .send({\n          from: account,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n    } catch (e) {\n      LoggerInstance.error('ERROR: Failed to join swap pool amount out')\n    }\n    return result\n  }\n\n  /**\n   * Get Router address set in side staking contract\n   * @param {String} ssAddress side staking contract address\n   * @return {String}\n   */\n  async getRouter(ssAddress: string): Promise<string> {\n    const sideStaking = setContractDefaults(\n      new this.web3.eth.Contract(this.ssAbi, ssAddress),\n      this.config\n    )\n    let result = null\n    try {\n      result = await sideStaking.methods.router().call()\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to get Router address: ${e.message}`)\n    }\n    return result\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { getFairGasPrice, setContractDefaults, configHelperNetworks } from '../utils'\nimport { Operation } from '../@types/Router'\nimport { Config } from '../models/index.js'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router {\n  public GASLIMIT_DEFAULT = 1000000\n  public routerAddress: string\n  public RouterAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public router: Contract\n\n  /**\n   * Instantiate Router.\n   * @param {String} routerAddress\n   * @param {AbiItem | AbiItem[]} Router\n   * @param {Web3} web3\n   */\n  constructor(\n    routerAddress: string,\n    web3: Web3,\n    RouterAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.routerAddress = routerAddress\n    this.RouterAbi = RouterAbi || (defaultRouter.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.router = setContractDefaults(\n      new this.web3.eth.Contract(this.RouterAbi, this.routerAddress),\n      this.config\n    )\n  }\n\n  /**\n   * Estimate gas cost for buyDTBatch method\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async estGasBuyDTBatch(address: string, operations: Operation[]): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .buyDTBatch(operations)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * BuyDTBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<TransactionReceipt>} Transaction receipt\n   */\n  public async buyDTBatch(\n    address: string,\n    operations: Operation[]\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasBuyDTBatch(address, operations)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.buyDTBatch(operations).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.router.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a side staking contract.\n   * @return {Promise<boolean>} true if is a SS contract\n   */\n  public async isSideStaking(address: string): Promise<boolean> {\n    return await this.router.methods.isSSContract(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.router.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.router.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.router.methods.factory().call()\n  }\n\n  /** Check if an address is a pool template contract.\n   * @return {Promise<boolean>} true if is a Template\n   */\n  public async isPoolTemplate(address: string): Promise<boolean> {\n    return await this.router.methods.isPoolTemplate(address).call()\n  }\n\n  /**\n   * Estimate gas cost for addApprovedToken\n   * @param {String} address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .addApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new token to oceanTokens list, pools with baseToken in this list have NO opf Fee\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeApprovedToken\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address we want to add\n   * @param {Contract} routerContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveApprovedToken(\n    address: string,\n    tokenAddress: string,\n    contractInstance?: Contract\n  ) {\n    const routerContract = contractInstance || this.router\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await routerContract.methods\n        .removeApprovedToken(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove a token from oceanTokens list, pools without baseToken in this list have a opf Fee\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeApprovedToken(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveApprovedToken(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeApprovedToken(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addSSContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddSSContract(address: string, tokenAddress: string): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to ssContract list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeSSContract method\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeSSContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a new contract from ssContract list\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to removed\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeSSContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveSSContract(address, tokenAddress)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.removeSSContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddFixedRateContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addFixedRateContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addFixedRateContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeFixedRateContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Removes a contract from fixedRate list\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeFixedRateContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveFixedRateContract(address, tokenAddress)\n\n    // Invoke removeFixedRateContract function of the contract\n    const trxReceipt = await this.router.methods\n      .removeFixedRateContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addDispenserContract(tokenAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addDispenserContract method\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemoveDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removeDispenserContract(tokenAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to dispenser list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removeDispenserContract(\n    address: string,\n    tokenAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemoveDispenserContract(address, tokenAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removeDispenserContract(tokenAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.router.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.router.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Estimate gas cost for updateOPFFee method\n   * @param {String} address\n   * @param {String} newFee new OPF Fee\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasUpdateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new contract to fixedRate list, after is added, can be used when deploying a new pool\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async updateOPCFee(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasUpdateOPCFee(\n      address,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .updateOPCFee(newSwapOceanFee, newSwapNonOceanFee, newConsumeFee, newProviderFee)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addPoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .addPoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new template to poolTemplates mapping, after template is added,it can be used\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addPoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasAddPoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods.addPoolTemplate(templateAddress).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removePoolTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasRemovePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.router.methods\n        .removePoolTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove template from poolTemplates mapping, after template is removed,it can be used anymore\n   * @param {String} address\n   * @param {String} templateAddress template address to remove\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async removePoolTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.estGasRemovePoolTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.router.methods\n      .removePoolTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport defaultNftAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  setContractDefaults,\n  configHelperNetworks\n} from '../utils'\nimport { Contract } from 'web3-eth-contract'\nimport { MetadataProof } from '../../src/@types'\nimport { Config } from '../models/index.js'\nimport { MetadataAndTokenURI } from '../@types'\n\n/**\n * ERC721 ROLES\n */\ninterface Roles {\n  manager: boolean\n  deployERC20: boolean\n  updateMetadata: boolean\n  store: boolean\n}\n\nexport class Nft {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public nftAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public startBlock: number\n  public config: Config\n\n  constructor(web3: Web3, nftAbi?: AbiItem | AbiItem[], config?: Config) {\n    this.nftAbi = nftAbi || (defaultNftAbi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n  }\n\n  /**\n   *  Estimate gas cost for createERC20 token creation\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .createERC20(\n          templateIndex,\n          [name, symbol],\n          [minter, paymentCollector, mpFeeAddress, feeToken],\n          [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n          []\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new ERC20 datatoken - only user with ERC20Deployer permission can succeed\n   * @param {String} nftAddress ERC721 addreess\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the ERC20\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 datatoken address\n   */\n  public async createErc20(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number\n  ): Promise<string> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCreateErc20(\n      nftAddress,\n      address,\n      minter,\n      paymentCollector,\n      mpFeeAddress,\n      feeToken,\n      feeAmount,\n      cap,\n      name,\n      symbol,\n      templateIndex,\n      nftContract\n    )\n\n    // Call createERC20 token function of the contract\n    const trxReceipt = await nftContract.methods\n      .createERC20(\n        templateIndex,\n        [name, symbol],\n        [minter, paymentCollector, mpFeeAddress, feeToken],\n        [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n        []\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.TokenCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /**\n   * Estimate gas cost for add manager call\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasAddManager(nftAddress, address, manager, nftContract)\n\n    // Invoke addManager function of the contract\n    const trxReceipt = await nftContract.methods.addManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeManager method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveManager(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    contractInstance?: Contract\n  ) {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeManager(manager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeManager(nftAddress: string, address: string, manager: string) {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasRemoveManager(\n      nftAddress,\n      address,\n      manager,\n      nftContract\n    )\n\n    // Invoke removeManager function of the contract\n    const trxReceipt = await nftContract.methods.removeManager(manager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for addToCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToCreateERC20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer User adress which is going to have erc20Deployer permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await this.estGasAddErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Invoke addToCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .addToCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromCreateERC20List method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromCreateErc20List(erc20Deployer)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove ERC20Deployer permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} erc20Deployer Address of the user to be revoked ERC20Deployer Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeErc20Deployer(\n    nftAddress: string,\n    address: string,\n    erc20Deployer: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === erc20Deployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor ERC20Deployer`)\n    }\n    const estGas = await this.estGasRemoveErc20Deployer(\n      nftAddress,\n      address,\n      erc20Deployer,\n      nftContract\n    )\n\n    // Call removeFromCreateERC20List function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromCreateERC20List(erc20Deployer)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addToMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addToMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call addToMetadataList function of the contract\n    const trxReceipt = await nftContract.methods.addToMetadataList(metadataUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for removeFromMetadataList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async esGasRemoveMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFromMetadataList(metadataUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeMetadataUpdater(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await this.esGasRemoveMetadataUpdater(\n      nftAddress,\n      address,\n      metadataUpdater,\n      nftContract\n    )\n\n    // Call removeFromMetadataList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFromMetadataList(metadataUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTo725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .addTo725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async addStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await this.estGasAddStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call addTo725StoreList function of the contract\n    const trxReceipt = await nftContract.methods.addTo725StoreList(storeUpdater).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for removeFrom725StoreList method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .removeFrom725StoreList(storeUpdater)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removeStoreUpdater(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await this.estGasRemoveStoreUpdater(\n      nftAddress,\n      address,\n      storeUpdater,\n      nftContract\n    )\n\n    // Call removeFrom725StoreList function of the contract\n    const trxReceipt = await nftContract.methods\n      .removeFrom725StoreList(storeUpdater)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   *  Estimate gas cost for cleanPermissions method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    nftAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to remove all ROLES at erc721 level: Managers, ERC20Deployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at erc20 level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n\n  public async cleanPermissions(\n    nftAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await this.estGasCleanPermissions(nftAddress, address, nftContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await nftContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for transfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .transferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async transferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .transferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for safeTransfer NFT method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSafeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .safeTransferFrom(nftOwner, nftReceiver, tokenId)\n        .estimateGas({ from: nftOwner }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async safeTransferNft(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await this.estGasSafeTransferNft(\n      nftAddress,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier,\n      nftContract\n    )\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods\n      .safeTransferFrom(nftOwner, nftReceiver, tokenIdentifier)\n      .send({\n        from: nftOwner,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  // TODO: Finish this description\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {Number} metadataState User which will receive the NFT, will also be set as Manager\n   * @param {String} metadataDecryptorUrl\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadata(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    if (!metadataProofs) metadataProofs = []\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaData(\n          metadataState,\n          metadataDecryptorUrl,\n          metadataDecryptorAddress,\n          flags,\n          data,\n          metadataHash,\n          metadataProofs\n        )\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      LoggerInstance.error('estGasSetMetadata error: ', e.message)\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on erc721 and erc20 level.\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadata(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[]\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadata(\n      nftAddress,\n      address,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs,\n      nftContract\n    )\n    const trxReceipt = await nftContract.methods\n      .setMetaData(\n        metadataState,\n        metadataDecryptorUrl,\n        metadataDecryptorAddress,\n        flags,\n        data,\n        metadataHash,\n        metadataProofs\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadata  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} metadataUpdater metadataUpdater address\n   * @param {MetaDataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataAndTokenURI(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await this.estGasSetMetadataAndTokenURI(\n      nftAddress,\n      metadataUpdater,\n      metadataAndTokenURI,\n      nftContract\n    )\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const trxReceipt = await nftContract.methods\n      .setMetaDataAndTokenURI(sanitizedMetadataAndTokenURI)\n      .send({\n        from: metadataUpdater,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for setMetadataState  method\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {Number} metadataState new metadata state\n   * @param {Contract} nftContract optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetMetadataState(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataState: number,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const nftContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.nftAbi, nftAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setMetaDataState(metadataState)\n        .estimateGas({ from: metadataUpdater }, (err, estGas) =>\n          err ? gasLimitDefault : estGas\n        )\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setMetadataState(\n    nftAddress: string,\n    address: string,\n    metadataState: number\n  ): Promise<TransactionReceipt> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await this.estGasSetMetadataState(nftAddress, address, metadataState)\n\n    // Call transferFrom function of the contract\n    const trxReceipt = await nftContract.methods.setMetaDataState(metadataState).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for setTokenURI method\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estSetTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await nftContract.methods\n        .setTokenURI('1', data)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async setTokenURI(\n    nftAddress: string,\n    address: string,\n    data: string\n  ): Promise<any> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n\n    const estGas = await this.estSetTokenURI(nftAddress, address, data)\n    const trxReceipt = await nftContract.methods.setTokenURI('1', data).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n    return trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<Roles> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress erc721 contract adress\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users ERC20Deployer role\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async isErc20Deployer(nftAddress: string, address: string): Promise<boolean> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const isERC20Deployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.getData(key).call()\n    return data\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress erc721 contract adress\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = setContractDefaults(\n      new this.web3.eth.Contract(this.nftAbi, nftAddress),\n      this.config\n    )\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport { Contract } from 'web3-eth-contract'\nimport Decimal from 'decimal.js'\nimport defaultDatatokensAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport defaultDatatokensEnterpriseAbi from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  setContractDefaults,\n  configHelperNetworks,\n  getFreOrderParams,\n  allowance,\n  ZERO_ADDRESS\n} from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../models/index.js'\n\n/**\n * ERC20 ROLES\n */\ninterface Roles {\n  minter: boolean\n  paymentManager: boolean\n}\n\nexport interface OrderParams {\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface DispenserParams {\n  maxTokens: string\n  maxBalance: string\n  withMint?: boolean // true if we want to allow the dispenser to be a minter\n  allowedSwapper?: string // only account that can ask tokens. set address(0) if not required\n}\n\nexport class Datatoken {\n  public GASLIMIT_DEFAULT = 1000000\n  public factoryAddress: string\n  public factoryABI: AbiItem | AbiItem[]\n  public datatokensAbi: AbiItem | AbiItem[]\n  public datatokensEnterpriseAbi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public nft: Nft\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    datatokensAbi?: AbiItem | AbiItem[],\n    datatokensEnterpriseAbi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.web3 = web3\n    this.datatokensAbi = datatokensAbi || (defaultDatatokensAbi.abi as AbiItem[])\n    this.datatokensEnterpriseAbi =\n      datatokensEnterpriseAbi || (defaultDatatokensEnterpriseAbi.abi as AbiItem[])\n    this.config = config || configHelperNetworks[0]\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasApprove(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for mint method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .approve(spender, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async approve(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasApprove(\n      dtAddress,\n      spender,\n      amount,\n      address,\n      dtContract\n    )\n\n    // Call mint contract method\n    const trxReceipt = await dtContract.methods\n      .approve(spender, this.web3.utils.toWei(amount))\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for mint method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasMint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Estimate gas cost for createFixedRate method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createFixedRate(\n          fixedRateParams.fixedRateAddress,\n          [\n            fixedRateParams.baseTokenAddress,\n            address,\n            fixedRateParams.marketFeeCollector,\n            fixedRateParams.allowedConsumer\n          ],\n          [\n            fixedRateParams.baseTokenDecimals,\n            fixedRateParams.datatokenDecimals,\n            fixedRateParams.fixedRate,\n            fixedRateParams.marketFee,\n            withMint\n          ]\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createFixedRate(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint ? 1 : 0\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateFixedRate(\n      dtAddress,\n      address,\n      fixedRateParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createFixedRate(\n        fixedRateParams.fixedRateAddress,\n        [\n          fixedRateParams.baseTokenAddress,\n          fixedRateParams.owner,\n          fixedRateParams.marketFeeCollector,\n          fixedRateParams.allowedConsumer\n        ],\n        [\n          fixedRateParams.baseTokenDecimals,\n          fixedRateParams.datatokenDecimals,\n          fixedRateParams.fixedRate,\n          fixedRateParams.marketFee,\n          withMint\n        ]\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createDispenser method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCreateDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .createDispenser(\n          dispenserAddress,\n          dispenserParams.maxTokens,\n          dispenserParams.maxBalance,\n          dispenserParams.withMint,\n          dispenserParams.allowedSwapper\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async createDispenser(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    if (!dispenserParams.withMint) dispenserParams.withMint = false\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    const estGas = await this.estGasCreateDispenser(\n      dtAddress,\n      address,\n      dispenserAddress,\n      dispenserParams,\n      dtContract\n    )\n\n    // Call createFixedRate contract method\n    const trxReceipt = await dtContract.methods\n      .createDispenser(\n        dispenserAddress,\n        dispenserParams.maxTokens,\n        dispenserParams.maxBalance,\n        dispenserParams.withMint,\n        dispenserParams.allowedSwapper\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n    return trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async mint(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.getDTPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await this.estGasMint(\n        dtAddress,\n        address,\n        amount,\n        toAddress,\n        dtContract\n      )\n\n      // Call mint contract method\n      const trxReceipt = await dtContract.methods\n        .mint(toAddress || address, this.web3.utils.toWei(amount))\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Estimate gas cost for addMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas cost for addMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add Minter for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await this.estGasAddMinter(dtAddress, address, minter, dtContract)\n\n    // Call addMinter function of the contract\n    const trxReceipt = await dtContract.methods.addMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removeMinter method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemoveMinter(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // should check ERC20Deployer role using erc721 level ..\n\n    // Estimate gas for removeMinter method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removeMinter(minter)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter(\n    dtAddress: string,\n    address: string,\n    minter: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemoveMinter(dtAddress, address, minter, dtContract)\n\n    // Call dtContract function of the contract\n    const trxReceipt = await dtContract.methods.removeMinter(minter).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for addPaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasAddPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for addFeeManager method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .addPaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async addPaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasAddPaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call addPaymentManager function of the contract\n    const trxReceipt = await dtContract.methods.addPaymentManager(paymentManager).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for removePaymentManager method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasRemovePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .removePaymentManager(paymentManager)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 datatoken\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async removePaymentManager(\n    dtAddress: string,\n    address: string,\n    paymentManager: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if ((await this.isERC20Deployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not ERC20Deployer`)\n    }\n\n    const estGas = await this.estGasRemovePaymentManager(\n      dtAddress,\n      address,\n      paymentManager,\n      dtContract\n    )\n\n    // Call removeFeeManager function of the contract\n    const trxReceipt = await dtContract.methods\n      .removePaymentManager(paymentManager)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas for setPaymentCollector method\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setPaymentCollector(paymentCollector)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<TransactionReceipt>} trxReceipt\n   */\n  public async setPaymentCollector(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isPaymentManager =\n      (await this.getDTPermissions(dtAddress, address)).paymentManager === true\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isErc20Deployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isErc20Deployer) {\n      throw new Error(`Caller is not Fee Manager, owner or erc20 Deployer`)\n    }\n\n    const estGas = await this.estGasSetPaymentCollector(\n      dtAddress,\n      address,\n      paymentCollector,\n      dtContract\n    )\n\n    // Call setFeeCollector method of the contract\n    const trxReceipt = await dtContract.methods\n      .setPaymentCollector(paymentCollector)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Estimate gas for transfer method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasTransfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .transfer(toAddress, amount)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async transferWei(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasTransfer(\n        dtAddress,\n        toAddress,\n        amount,\n        address,\n        dtContract\n      )\n      // Call transfer function of the contract\n      const trxReceipt = await dtContract.methods.transfer(toAddress, amount).send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to transfer tokens: ${e.message}`)\n      throw new Error(`Failed Failed to transfer tokens: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for startOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasStartOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<TransactionReceipt>} string\n   */\n  public async startOrder(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const publishMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const tokens = [\n      {\n        token: providerFees.providerFeeToken,\n        feeAmount: providerFees.providerFeeAmount\n      },\n      {\n        token: consumeMarketFee.consumeMarketFeeToken,\n        feeAmount: parseFloat(consumeMarketFee.consumeMarketFeeAmount)\n      },\n      {\n        token: publishMarketFee[1],\n        feeAmount: parseFloat(publishMarketFee[2])\n      }\n    ]\n\n    const uniqueTokens = []\n    tokens.map((address) => {\n      if (uniqueTokens.length > 0) {\n        uniqueTokens.map((uAddress) => {\n          if (uAddress.token === address.token) {\n            uAddress.feeAmount += address.feeAmount\n          } else {\n            uniqueTokens.push({\n              token: address.token,\n              feeAmount: address.feeAmount\n            })\n          }\n        })\n      } else {\n        uniqueTokens.push({\n          token: address.token,\n          feeAmount: address.feeAmount\n        })\n      }\n    })\n\n    const getCurrentAllownceTokens = uniqueTokens.map(async (token) => {\n      if (token.token === ZERO_ADDRESS || token.feeAmount === 0) return token\n      const currentAllowance = await allowance(this.web3, token.token, address, consumer)\n      if (\n        new Decimal(currentAllowance).greaterThanOrEqualTo(new Decimal(token.feeAmount))\n      ) {\n        LoggerInstance.error(`ERROR: Failed checking allowance: ${token.token}`)\n        throw new Error(`allowance (${currentAllowance}) is too low`)\n      } else {\n        token.currentAllowance = currentAllowance\n        return token\n      }\n    })\n\n    try {\n      const allownceTokens = await Promise.all(getCurrentAllownceTokens)\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed checking allowance : ${e}`)\n      throw new Error(`Failed checking allowance: ${e}`)\n    }\n\n    try {\n      const estGas = await this.estGasStartOrder(\n        dtAddress,\n        address,\n        consumer,\n        serviceIndex,\n        providerFees,\n        consumeMarketFee,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .startOrder(consumer, serviceIndex, providerFees, consumeMarketFee)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to start order : ${e.message}`)\n      throw new Error(`Failed to start order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromFreAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const freContractParams = getFreOrderParams(freParams)\n\n      const estGas = await this.estGasBuyFromFreAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        freContractParams,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromFreAndOrder(orderParams, freContractParams)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas cost for buyFromFreAndOrder method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasBuyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress)\n\n    // Estimate gas for startOrder method\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async buyFromDispenserAndOrder(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string\n  ): Promise<TransactionReceipt> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensEnterpriseAbi, dtAddress),\n      this.config\n    )\n    try {\n      const estGas = await this.estGasBuyFromDispenserAndOrder(\n        dtAddress,\n        address,\n        orderParams,\n        dispenserContract,\n        dtContract\n      )\n\n      const trxReceipt = await dtContract.methods\n        .buyFromDispenserAndOrder(orderParams, dispenserContract)\n        .send({\n          from: address,\n          gas: estGas + 1,\n          gasPrice: await getFairGasPrice(this.web3, this.config)\n        })\n      return trxReceipt\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to buy DT From Fre And Order : ${e.message}`)\n      throw new Error(`Failed to buy DT From Fre And Order: ${e.message}`)\n    }\n  }\n\n  /** Estimate gas for setData method\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasSetData(\n    dtAddress: string,\n    address: string,\n    value: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .setData(value)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async setData(\n    dtAddress: string,\n    address: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if (!(await this.isERC20Deployer(dtAddress, address))) {\n      throw new Error(`User is not ERC20 Deployer`)\n    }\n\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasSetData(dtAddress, address, value, dtContract)\n\n    // Call setData function of the contract\n    const trxReceipt = await dtContract.methods.setData(value).send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas for cleanPermissions method\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async estGasCleanPermissions(\n    dtAddress: string,\n    address: string,\n    contractInstance?: Contract\n  ): Promise<any> {\n    const dtContract =\n      contractInstance ||\n      setContractDefaults(\n        new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n        this.config\n      )\n\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await dtContract.methods\n        .cleanPermissions()\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Clean erc20level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<TransactionReceipt>} transactionId\n   */\n  public async cleanPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n\n    const estGas = await this.estGasCleanPermissions(dtAddress, address, dtContract)\n\n    // Call cleanPermissions function of the contract\n    const trxReceipt = await dtContract.methods.cleanPermissions().send({\n      from: address,\n      gas: estGas + 1,\n      gasPrice: await getFairGasPrice(this.web3, this.config)\n    })\n\n    return trxReceipt\n  }\n\n  /** Returns ERC20 user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<Roles>}\n   */\n  public async getDTPermissions(dtAddress: string, address: string): Promise<Roles> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isERC20Deployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, dtAddress),\n      this.config\n    )\n    const isERC20Deployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isERC20Deployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = setContractDefaults(\n      new this.web3.eth.Contract(this.datatokensAbi, datatokenAddress, {\n        from: address\n      }),\n      this.config\n    )\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n}\n","import { Contract } from 'web3-eth-contract'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport defaultFactory721Abi from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  LoggerInstance,\n  getFairGasPrice,\n  generateDtName,\n  getFreCreationParams,\n  getErcCreationParams,\n  getPoolCreationParams,\n  configHelperNetworks,\n  setContractDefaults,\n  ZERO_ADDRESS\n} from '../utils'\nimport { Config } from '../models/index.js'\nimport {\n  ProviderFees,\n  FreCreationParams,\n  Erc20CreateParams,\n  PoolCreationParams,\n  DispenserCreationParams,\n  ConsumeMarketFee\n} from '../@types/index.js'\n\ninterface Template {\n  templateAddress: string\n  isActive: boolean\n}\n\nexport interface TokenOrder {\n  tokenAddress: string\n  consumer: string\n  serviceIndex: number\n  _providerFee: ProviderFees\n  _consumeMarketFee: ConsumeMarketFee\n}\n\nexport interface NftCreateData {\n  name: string\n  symbol: string\n  templateIndex: number\n  tokenURI: string\n  transferable: boolean\n  owner: string\n}\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory {\n  public GASLIMIT_DEFAULT = 1000000\n  public factory721Address: string\n  public factory721Abi: AbiItem | AbiItem[]\n  public web3: Web3\n  public config: Config\n  public factory721: Contract\n\n  /**\n   * Instantiate Datatokens.\n   * @param {String} factory721Address\n   * @param {AbiItem | AbiItem[]} factory721ABI\n   * @param {Web3} web3\n   */\n  constructor(\n    factory721Address: string,\n    web3: Web3,\n    factory721Abi?: AbiItem | AbiItem[],\n    config?: Config\n  ) {\n    this.factory721Address = factory721Address\n    this.factory721Abi = factory721Abi || (defaultFactory721Abi.abi as AbiItem[])\n    this.web3 = web3\n    this.config = config || configHelperNetworks[0]\n    this.factory721 = setContractDefaults(\n      new this.web3.eth.Contract(this.factory721Abi, this.factory721Address),\n      this.config\n    )\n  }\n\n  /**\n   * Get estimated gas cost for deployERC721Contract value\n   * @param {String} address\n   * @param {String} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async estGasCreateNFT(address: string, nftData: NftCreateData): Promise<string> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .deployERC721Contract(\n          nftData.name,\n          nftData.symbol,\n          nftData.templateIndex,\n          ZERO_ADDRESS,\n          ZERO_ADDRESS,\n          nftData.tokenURI,\n          nftData.transferable,\n          nftData.owner\n        )\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT(address: string, nftData: NftCreateData): Promise<string> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.estGasCreateNFT(address, nftData)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .deployERC721Contract(\n        nftData.name,\n        nftData.symbol,\n        nftData.templateIndex,\n        ZERO_ADDRESS,\n        ZERO_ADDRESS,\n        nftData.tokenURI,\n        nftData.transferable,\n        nftData.owner\n      )\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    let tokenAddress = null\n    try {\n      tokenAddress = trxReceipt.events.NFTCreated.returnValues[0]\n    } catch (e) {\n      LoggerInstance.error(`ERROR: Failed to create datatoken : ${e.message}`)\n    }\n    return tokenAddress\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentNFTCount().call()\n    return trxReceipt\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const trxReceipt = await this.factory721.methods.getCurrentTokenCount().call()\n    return trxReceipt\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const trxReceipt = await this.factory721.methods.owner().call()\n    return trxReceipt\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of ERC20 Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.factory721.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.factory721.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken(erc20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.factory721.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if ERC20 is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.factory721.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.factory721.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Estimate gas cost for add721TokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .add721TokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addNFTTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.estGasAddNFTTemplate(address, templateAddress)\n\n    // Invoke add721TokenTemplate function of the contract\n    const trxReceipt = await this.factory721.methods\n      .add721TokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disable721TokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disable721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.estGasDisableNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disable721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivate721TokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateNFTTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.estGasReactivateNFTTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivate721TokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for addTokenTemplate method\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async estGasAddTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .addTokenTemplate(templateAddress)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n\n    return estGas\n  }\n\n  /**\n   * Add a new erc721 token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<TransactionReceipt>}\n   */\n  public async addTokenTemplate(\n    address: string,\n    templateAddress: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.estGasAddTokenTemplate(address, templateAddress)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .addTokenTemplate(templateAddress)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for disableTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasDisableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .disableTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async disableTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.estGasDisableTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .disableTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for reactivateTokenTemplate method\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async estGasReactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .reactivateTokenTemplate(templateIndex)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<TransactionReceipt>} current token template count\n   */\n  public async reactivateTokenTemplate(\n    address: string,\n    templateIndex: number\n  ): Promise<TransactionReceipt> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.estGasReactivateTokenTemplate(address, templateIndex)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .reactivateTokenTemplate(templateIndex)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for startMultipleTokenOrder method\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasStartMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      estGas = await this.factory721.methods\n        .startMultipleTokenOrder(orders)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ erc20 contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - erc20 datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async startMultipleTokenOrder(\n    address: string,\n    orders: TokenOrder[]\n  ): Promise<TransactionReceipt> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.estGasStartMultipleTokenOrder(address, orders)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .startMultipleTokenOrder(orders)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftWithErc20 method\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async estGasCreateNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<any> {\n    // Get estimated gas value\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20(nftCreateData, ercCreateData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftWithErc20\n   *      Creates a new NFT, then a ERC20,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for erc20 creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n\n  public async createNftWithErc20(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    const estGas = await this.estGasCreateNftWithErc20(address, nftCreateData, ercParams)\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20(nftCreateData, ercCreateData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /**\n   * Estimate gas cost for createNftErc20WithPool method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n    try {\n      const ercCreateData = getErcCreationParams(ercParams)\n      const poolData = await getPoolCreationParams(this.web3, poolParams)\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithPool\n   *      Creates a new NFT, then a ERC20, then a Pool, all in one call\n   *      Use this carefully, because if Pool creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param poolParams input data for Pool Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithPool(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    poolParams: PoolCreationParams\n  ): Promise<TransactionReceipt> {\n    const estGas = await this.estGasCreateNftErc20WithPool(\n      address,\n      nftCreateData,\n      ercParams,\n      poolParams\n    )\n    const ercCreateData = getErcCreationParams(ercParams)\n    const poolData = await getPoolCreationParams(this.web3, poolParams)\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithPool(nftCreateData, ercCreateData, poolData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = await getFreCreationParams(freParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithFixedRate\n   *      Creates a new NFT, then a ERC20, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithFixedRate(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    freParams: FreCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n    const fixedData = getFreCreationParams(freParams)\n\n    const estGas = await this.estGasCreateNftErc20WithFixedRate(\n      address,\n      nftCreateData,\n      ercParams,\n      freParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithFixedRate(nftCreateData, ercCreateData, fixedData)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n\n  /** Estimate gas cost for createNftErc20WithFixedRate method\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   * @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async estGasCreateNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<any> {\n    const gasLimitDefault = this.GASLIMIT_DEFAULT\n    let estGas\n\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    try {\n      estGas = await this.factory721.methods\n        .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n        .estimateGas({ from: address }, (err, estGas) => (err ? gasLimitDefault : estGas))\n    } catch (e) {\n      estGas = gasLimitDefault\n      LoggerInstance.error('Failed to estimate gas for createNftErc20WithDispenser', e)\n    }\n    return estGas\n  }\n\n  /**\n   * @dev createNftErc20WithDispenser\n   *      Creates a new NFT, then a ERC20, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param ercParams input data for ERC20 Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftErc20WithDispenser(\n    address: string,\n    nftCreateData: NftCreateData,\n    ercParams: Erc20CreateParams,\n    dispenserParams: DispenserCreationParams\n  ): Promise<TransactionReceipt> {\n    const ercCreateData = getErcCreationParams(ercParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await this.estGasCreateNftErc20WithDispenser(\n      address,\n      nftCreateData,\n      ercParams,\n      dispenserParams\n    )\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await this.factory721.methods\n      .createNftWithErc20WithDispenser(nftCreateData, ercCreateData, dispenserParams)\n      .send({\n        from: address,\n        gas: estGas + 1,\n        gasPrice: await getFairGasPrice(this.web3, this.config)\n      })\n\n    return trxReceipt\n  }\n}\n","import { LogLevel } from '../utils/Logger'\nimport { AbiItem } from 'web3-utils/types'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public erc721FactoryAddress?: string\n\n  /**\n   * Factory ABI\n   * @type {string}\n   */\n  public erc721FFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool Template address\n   * @type {string}\n   */\n  public poolTemplateAddress?: string\n\n  /**\n   * Pool Factory ABI\n   * @type {string}\n   */\n  public poolFactoryABI?: AbiItem | AbiItem[]\n\n  /**\n   * Pool ABI\n   * @type {string}\n   */\n  public poolABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, rinkeby, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n}\n\nexport default Config\n","import { LoggerInstance } from './Logger'\n\nexport const zeroX = (input: string): string => zeroXTransformer(input, true)\nexport const noZeroX = (input: string): string => zeroXTransformer(input, false)\nexport function zeroXTransformer(input = '', zeroOutput: boolean): string {\n  const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer')\n  return (zeroOutput && valid ? '0x' : '') + output\n}\n\n// Shared functions\nfunction inputMatch(\n  input: string,\n  regexp: RegExp,\n  conversorName: string\n): { valid: boolean; output: string } {\n  if (typeof input !== 'string') {\n    LoggerInstance.debug('Not input string:')\n    LoggerInstance.debug(input)\n    throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n  }\n  const match = input.match(regexp)\n  if (!match) {\n    LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n    return { valid: false, output: input }\n  }\n  return { valid: true, output: match[1] }\n}\n","import Web3 from 'web3'\nimport { LoggerInstance, getData, downloadFile, downloadFileBrowser } from '../utils'\nimport {\n  FileMetadata,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize\n} from '../@types/'\nimport { noZeroX } from '../utils/ConversionTypeHelper'\nimport { signText, signWithHash } from '../utils/SignatureUtils'\nimport fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types/DownloadResponse'\nexport interface HttpCallback {\n  (httpMethod: string, url: string, body: string, header: any): Promise<any>\n}\n\nexport interface ServiceEndpoint {\n  serviceName: string\n  method: string\n  urlPath: string\n}\nexport interface UserCustomParameters {\n  [key: string]: any\n}\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      return null\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  public async createSignature(\n    web3: Web3,\n    accountId: string,\n    agreementId: string\n  ): Promise<string> {\n    const signature = await signText(web3, noZeroX(agreementId), accountId)\n    return signature\n  }\n\n  public async createHashSignature(\n    web3: Web3,\n    accountId: string,\n    message: string\n  ): Promise<string> {\n    const signature = await signWithHash(web3, message, accountId)\n    return signature\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'encrypt')\n      ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        signal: signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {string} did did\n   * @param {number} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did: did, serviceId: serviceId }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {string} url or did\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileMetadata[]>} urlDetails\n   */\n  public async checkFileUrl(\n    url: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<FileMetadata[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { url: url, type: 'url' }\n    const files: FileMetadata[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: FileMetadata[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      return null\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e.message)\n      return null\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.createSignature(web3, accountId, did + nonce)\n\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      console.error('Compute start failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      return null\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @param {AbortSignal} signal Abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    console.log('computeResult providerEndpoints: ', providerEndpoints)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    console.log('computeResult serviceEndpoints: ', serviceEndpoints)\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    console.log('computeResult computeResultUrl: ', computeResultUrl)\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n\n    console.log('computeResult resultUrl: ', resultUrl)\n    if (!resultUrl) return null\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.createHashSignature(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n\n    const payload = Object()\n    payload.documentId = noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && params.providerAddress) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n}\n\nexport const ProviderInstance = new Provider()\nexport default ProviderInstance\n"],"names":["LogLevel","Logger","constructor","logLevel","Error","this","setLevel","bypass","args","dispatch","Infinity","debug","Verbose","log","Log","warn","Warn","error","verb","level","console","LoggerInstance","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","minAbi","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","ZERO_ADDRESS","GASLIMIT_DEFAULT","setContractDefaults","contract","config","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","getFairGasPrice","web3","x","BigNumber","eth","getGasPrice","gasFeeMultiplier","multipliedBy","integerValue","ROUND_DOWN","toString","getErcCreationParams","ercParams","templateIndex","strings","addresses","minter","paymentCollector","mpFeeAddress","feeToken","uints","Web3","utils","toWei","cap","feeAmount","bytess","getFreOrderParams","freParams","exchangeContract","exchangeId","maxBaseTokenAmount","swapMarketFee","marketFeeAddress","getFreCreationParams","allowedConsumer","withMint","fixedPriceAddress","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","fixedRate","marketFee","getPoolCreationParams","poolParams","ssContract","baseTokenSender","publisherAddress","poolTemplateAddress","ssParams","rate","vestingAmount","vestedBlocks","amountToUnits","initialBaseTokenLiquidity","swapFees","swapFeeLiquidityProvider","swapFeeMarketRunner","unitsToAmount","token","amount","tokenContract","Contract","decimals","methods","call","amountFormatted","div","exponentiatedBy","EXPONENTIAL_AT","e","message","times","fetchData","url","opts","result","fetch","ok","method","text","downloadFileBrowser","anchor","document","createElement","download","href","click","downloadFile","index","response","filename","headers","get","match","split","pop","data","arrayBuffer","getData","postData","payload","async","body","postWithHeaders","configHelperNetworksBase","chainId","network","metadataCacheUri","nodeUri","providerUri","subgraphUri","explorerUri","oceanTokenAddress","oceanTokenSymbol","fixedRateExchangeAddress","dispenserAddress","startBlock","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","FixedPrice","Dispenser","Staking","poolTemplate","ERC721Factory","OPFCommunityFeeCollector","Ocean","erc721FactoryAddress","sideStakingAddress","opfCommunityFeeCollector","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","generateDid","erc721Address","toChecksumAddress","sha256","getHash","signText","publicKey","password","isMetaMask","currentProvider","personal","sign","e2","signHash","address","signedMessage","substr","r","slice","s","v","signWithHash","hash","utf8ToHex","estApprove","account","tokenAddress","spender","contractInstance","gasLimitDefault","estGas","approve","estimateGas","from","err","force","currentAllowence","allowance","Decimal","greaterThanOrEqualTo","send","gas","gasPrice","trxReceipt","balance","balanceOf","sleep","ms","Promise","resolve","setTimeout","calcMaxExactOut","calcMaxExactIn","getMaxSwapExactOut","poolInstance","poolAddress","getReserve","getMaxSwapExactIn","getMaxAddLiquidity","getMaxRemoveLiquidity","Aquarius","aquariusURL","did","signal","path","json","status","txid","tries","ddo","event","valid","jsonResponse","JSON","stringify","proof","validatorAddress","errors","MaxUint256","Pool","poolAbi","PoolTemplate","abi","fromWei","fee","poolContract","defaultErc20Abi","setSwapFee","pool","estSetSwapFee","getNumTokens","totalSupply","getCurrentTokens","getFinalTokens","getController","getBaseTokenAddress","getDatatokenAddress","getMarketFee","_publishMarketCollector","_opcCollector","isBound","getBalance","isFinalized","getSwapFee","weight","getNormalizedWeight","getDenormalizedWeight","getTotalDenormalizedWeight","publishMarketFees","getCurrentOPCFees","communityFees","collectOPC","estCollectOPC","collectMarketFee","getMarketFeeCollector","estCollectMarketFee","newPublishMarketAddress","newPublishMarketSwapFee","updatePublishMarketFee","estUpdatePublishMarketFee","tokenInOutMarket","amountsInOutMaxFee","tokenAmountIn","tokenIn","minAmountOut","tokenOut","maxPrice","getBaseToken","swapExactAmountIn","maxSwap","greaterThan","estSwapExactAmountIn","maxAmountIn","tokenAmountOut","swapExactAmountOut","estSwapExactAmountOut","poolAmountOut","maxAmountsIn","joinPool","weiMaxAmountsIn","tokens","i","push","estJoinPool","poolAmountIn","minAmountsOut","exitPool","weiMinAmountsOut","estExitPool","minPoolAmountOut","joinswapExternAmountIn","amountInFormatted","estJoinswapExternAmountIn","minTokenAmountOut","exitswapPoolAmountIn","calcSingleOutGivenPoolIn","minTokenOutFormatted","estExitswapPoolAmountIn","decimalsTokenIn","decimalsTokenOut","tokenInContract","tokenOutContract","decimalsDiff","price","getSpotPrice","amountOutFormatted","getAmountInExactOut","tokenAmount","liquidityProviderSwapFeeAmount","lpFeeAmount","oceanFeeAmount","publishMarketSwapFeeAmount","consumeMarketSwapFeeAmount","getAmountOutExactIn","calcPoolOutSingleIn","calcSingleInPoolOut","calcSingleOutPoolIn","calcPoolInSingleOut","getSwapEventSignature","eventdata","o","encodeEventSignature","getJoinEventSignature","getExitEventSignature","dispenserAbi","dispenserContract","defaultDispenserAbi","dtAdress","maxTokens","maxBalance","logger","dtAddress","allowedSwapper","create","estGasCreate","activate","estGasActivate","deactivate","estGasDeactivate","newAllowedSwapper","setAllowedSwapper","estGasSetAllowedSwapper","destination","dispense","estGasDispense","ownerWithdraw","estGasOwnerWithdraw","datatoken","active","String","isMinter","FixedRateCreateProgressStep","FixedRateExchange","fixedRateExchangeAbi","oceanAddress","fixedRateContract","ssAbi","defaultFixedRateExchangeAbi","baseToken","generateExchangeId","datatokenAddress","dtAmount","consumeMarketAddress","consumeMarketFee","buyDT","datatokenAmount","exchange","getExchange","consumeMarketFeeFormatted","dtAmountFormatted","maxBtFormatted","estBuyDT","sellDT","minBaseTokenAmount","minBtFormatted","getNumberOfExchanges","newRate","setRate","estSetRate","estSetAllowedSwapper","toggleExchangeState","estActivate","estDeactivate","weiRate","getRate","dtSupply","getDTSupply","btSupply","getBTSupply","getAllowedSwapper","fixedRateExchange","calcBaseInGivenOutDT","baseTokenAmount","marketFeeAmount","consumeMarketFeeAmount","calcBaseOutGivenInDT","dtDecimals","btDecimals","dtBalance","btBalance","getFeesInfo","opcFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","toggleMintState","estActivateMint","fixedrate","amountWei","collectBT","estCollectBT","collectDT","estCollectDT","estCollectOceanFee","collectOceanFee","opcCollector","router","exchangeOwner","newMarketFee","updateMarketFee","newMarketFeeCollector","updateMarketFeeCollector","estUpdateMarketFeeCollector","SideStaking","SideStakingTemplate","parseInt","ssAddress","sideStaking","getDatatokenCirculatingSupply","getDatatokenCurrentCirculatingSupply","getPublisherAddress","getPoolAddress","getBaseTokenBalance","getDatatokenBalance","getvestingEndBlock","getvestingAmount","getvestingLastBlock","getvestingAmountSoFar","getVesting","estGetVesting","swapFee","setPoolSwapFee","estSetPoolSwapFee","Router","routerAddress","RouterAbi","defaultRouter","operations","buyDTBatch","estGasBuyDTBatch","isApprovedToken","isSSContract","isFixedRateContract","routerOwner","factory","isPoolTemplate","routerContract","addApprovedToken","getOwner","estGasAddApprovedToken","removeApprovedToken","estGasRemoveApprovedToken","addSSContract","estGasAddSSContract","removeSSContract","estGasRemoveSSContract","addFixedRateContract","estGasAddFixedRateContract","removeFixedRateContract","estGasRemoveFixedRateContract","addDispenserContract","estGasAddDispenserContract","removeDispenserContract","estGasRemoveDispenserContract","getOPCFee","swapOceanFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","estGasUpdateOPCFee","templateAddress","addPoolTemplate","estGasAddPoolTemplate","removePoolTemplate","estGasRemovePoolTemplate","Nft","nftAbi","factory721Address","factory721Abi","defaultNftAbi","nftAddress","nftContract","createERC20","getNftPermissions","deployERC20","estGasCreateErc20","events","TokenCreated","returnValues","manager","addManager","getNftOwner","estGasAddManager","removeManager","estGasRemoveManager","erc20Deployer","addToCreateERC20List","estGasAddErc20Deployer","removeFromCreateErc20List","estGasRemoveErc20Deployer","removeFromCreateERC20List","metadataUpdater","addToMetadataList","estGasAddMetadataUpdater","removeFromMetadataList","updateMetadata","esGasRemoveMetadataUpdater","storeUpdater","addTo725StoreList","estGasAddStoreUpdater","removeFrom725StoreList","store","estGasRemoveStoreUpdater","cleanPermissions","estGasCleanPermissions","nftOwner","nftReceiver","tokenId","transferFrom","tokenIdentifier","estGasTransferNft","safeTransferFrom","estGasSafeTransferNft","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","estGasSetMetadata","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","estGasSetMetadataAndTokenURI","setMetaDataState","estGasSetMetadataState","setTokenURI","estSetTokenURI","ownerOf","getPermissions","getMetaData","isERC20Deployer","key","id","tokenURI","Datatoken","datatokensAbi","datatokensEnterpriseAbi","factoryAddress","factoryABI","nft","defaultDatatokensAbi","defaultDatatokensEnterpriseAbi","dtContract","estGasApprove","toAddress","mint","fixedRateParams","createFixedRate","estGasCreateFixedRate","dispenserParams","createDispenser","estGasCreateDispenser","getDTPermissions","capAvailble","getCap","gte","estGasMint","addMinter","estGasAddMinter","removeMinter","estGasRemoveMinter","paymentManager","addPaymentManager","estGasAddPaymentManager","removePaymentManager","estGasRemovePaymentManager","setPaymentCollector","isPaymentManager","getNFTAddress","isNftOwner","nftPermissions","estGasSetPaymentCollector","getPaymentCollector","weiAmount","transferWei","transfer","estGasTransfer","consumer","serviceIndex","providerFees","startOrder","consumeMarketFeeAddress","consumeMarketFeeToken","publishMarketFee","getPublishingMarketFee","providerFeeToken","providerFeeAmount","parseFloat","uniqueTokens","map","uAddress","getCurrentAllownceTokens","currentAllowance","_this","all","estGasStartOrder","orderParams","buyFromFreAndOrder","freContractParams","estGasBuyFromFreAndOrder","buyFromDispenserAndOrder","estGasBuyFromDispenserAndOrder","value","setData","estGasSetData","permissions","getERC721Address","NftFactory","factory721","defaultFactory721Abi","nftData","deployERC721Contract","transferable","getCurrentNFTTemplateCount","getNFTTemplate","estGasCreateNFT","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTemplateCount","getTokenTemplate","erc20List","erc721List","add721TokenTemplate","estGasAddNFTTemplate","disable721TokenTemplate","estGasDisableNFTTemplate","reactivate721TokenTemplate","estGasReactivateNFTTemplate","addTokenTemplate","estGasAddTokenTemplate","disableTokenTemplate","getCurrentTokenTemplateCount","estGasDisableTokenTemplate","reactivateTokenTemplate","estGasReactivateTokenTemplate","orders","startMultipleTokenOrder","estGasStartMultipleTokenOrder","nftCreateData","ercCreateData","createNftWithErc20","estGasCreateNftWithErc20","poolData","createNftWithErc20WithPool","estGasCreateNftErc20WithPool","fixedData","createNftWithErc20WithFixedRate","estGasCreateNftErc20WithFixedRate","createNftWithErc20WithDispenser","estGasCreateNftErc20WithDispenser","Config","providerAddress","web3Provider","erc721FFactoryABI","datatokensABI","poolFactoryABI","poolABI","fixedRateExchangeAddressABI","dispenserABI","verbose","authMessage","authTokenExpiration","parityUri","threshold","noZeroX","input","zeroOutput","output","regexp","conversorName","inputMatch","zeroXTransformer","Provider","endpoints","getEndpointURL","servicesEndpoints","serviceName","providerEndpoint","serviceEndpoints","urlPath","consumerAddress","providerEndpoints","getEndpoints","getServiceEndpoints","nonce","accountId","agreementId","serviceId","files","results","_this$getEndpointURL","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","transferTxId","downloadUrl","Date","now","consumeUrl","createSignature","dataset","algorithm","additionalDatasets","computeStartUrl","signatureMessage","documentId","signature","createHashSignature","Object","environment","statusText","jobId","computeStopUrl","getNonce","computeStatusUrl","computeResultUrl","resultUrl","computeDeleteUrl","params","ProviderInstance"],"mappings":"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"}